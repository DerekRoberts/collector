{ "_type" : "Query", "title" : "PDC-001", "description" : "Population profile: age and gender", "generated" : false, "user_id" : { "$oid" : "551c1c4a062036a571d114c7" }, "query_structure" : { "find" : { "and" : [] }, "filter" : { "and" : [] }, "extract" : { "selections" : [], "groups" : [] } }, "filter" : "", "map" : "// Reference Number: PDC-001\r\n// Query Title: Population profile: age and gender\r\n\r\nfunction map( patient ){\r\n  //constants\r\n  var gdrs = [\"female_\", \"male_\", \"undifferentiated_\", \"undefined_\"];\r\n\r\n  // Store physician ID, via JSON key\r\n  var pid = \"_\" + patient.json.primary_care_provider_id;\r\n\r\n  //Store age and gender, via patient Object functions\r\n  var age = patient.age();\r\n  var gdr = patient.gender();\r\n\r\n  // Convert gdr to an expected value\r\n  if( gdr && gdr.toString().toUpperCase() === \"F\" )\r\n    gdr = \"female_\";\r\n  else if( gdr && gdr.toString().toUpperCase() === \"M\" )\r\n    gdr = \"male_\";\r\n  else if( gdr && gdr.toString().toUpperCase() === \"UN\" )\r\n    gdr = \"undifferentiated_\";\r\n  else\r\n    gdr = \"undefined_\";\r\n\r\n  // Edge cases assigned -1 (out of specified ranges)\r\n  if( typeof age !== 'number' || age < 0 ){\r\n    return;\r\n  }\r\n\r\n  // Emit for 90+ special case\r\n  if( age >= 90 )\r\n    emit( gdr + \"90+\" + pid, 1 );\r\n  else\r\n    emit( gdr + \"90+\" + pid, 0 );\r\n\r\n  gdrs.forEach(\r\n    function(x)\r\n    {\r\n      emit(x + \"90+\" + pid, 0);\r\n    }\r\n  );\r\n\r\n  // Emit for remaining ranges (10 yrs, descending)\r\n  for( var i = 80; i >= 0; i-=10 ){\r\n    var range = i + \"-\" +( i + 9 );\r\n    if( age >= i && age <( i + 10 ))\r\n      emit( gdr + range + pid, 1 );\r\n    for(var j=0; j<gdrs.length; j++)\r\n    {\r\n      emit(gdrs[j] + range + pid, 0);\r\n    }\r\n  }\r\n}\r\n", "reduce" : "function reduce(key, values) {\r\n  return Array.sum(values); \r\n}" }
{ "_type" : "Query", "title" : "PDC-008", "description" : "BMI or WC in last 2y / age 12-19", "generated" : false, "user_id" : { "$oid" : "551c1c4a062036a571d114c7" }, "query_structure" : { "find" : { "and" : [] }, "filter" : { "and" : [] }, "extract" : { "selections" : [], "groups" : [] } }, "filter" : "", "map" : "/**\r\n * Query Title: PDC-008\r\n * Query Type:  Ratio\r\n * Description: BMI or WC in last 2y / age 12-19\r\n */\r\nfunction map( patient ){\r\n  /**\r\n    * Denominator\r\n    *\r\n    * Base criteria:\r\n    *   - age 12 - 19\r\n    */\r\n  function checkDenominator(){\r\n    // Ages\r\n    var ageMin  = 12,\r\n        ageMax  = 19;\r\n\r\n    // Inclusion/exclusion\r\n    return isAge( ageMin, ageMax );\r\n  }\r\n\r\n\r\n  /**\r\n    * Numerator\r\n    *\r\n    * Additional criteria:\r\n    *   - has Waist circuference\r\n    *   OR\r\n    *   - has BMI\r\n    *   OR\r\n    *   - has height AND has weight\r\n    *   ---> ALL documented in last 2 years\r\n    */\r\n  function checkNumerator(){\r\n    // Dates\r\n    var end      = new Date(),\r\n        vitStart = new Date( end.getFullYear() - 2, end.getMonth(), end.getDate() ),\r\n\r\n    // Coded entry lists\r\n        vitList  = patient.vitalSigns(),\r\n\r\n    // Medical codes\r\n        // http://search.loinc.org/search.zul\r\n        vitCodes_WC ={ \"LOINC\" :[ \"56115-9\" ]},  // Waist Circumference by NCFS\r\n        vitCodes_BM ={ \"LOINC\" :[ \"39156-5\" ]},  // Body mass index (BMI) [Ratio]\r\n        vitCodes_Ht ={ \"LOINC\" :[ \"8302-2\" ]},   // Body height\r\n        vitCodes_Wt ={ \"LOINC\" :[ \"3141-9\" ]},   // Body weight Measured\r\n\r\n    // Filters\r\n    //   - start/end and min/max may be used in either paired order\r\n    //   - values and dates may be ommitted as necessary\r\n        vitalSigns_WC    = filter_general( vitList, vitCodes_WC, vitStart ),\r\n        vitalSigns_BM    = filter_general( vitList, vitCodes_BM, vitStart ),\r\n        vitalSigns_Ht    = filter_general( vitList, vitCodes_Ht, vitStart ),\r\n        vitalSigns_Wt    = filter_general( vitList, vitCodes_Wt, vitStart );\r\n\r\n    // Inclusion/exclusion\r\n    //   - isAge() and isMatch() are boolean (yes/no)\r\n    //   - use && (AND) and || (OR) with brackets (...)\r\n    return isMatch( vitalSigns_WC )||\r\n           isMatch( vitalSigns_BM )||\r\n           ( isMatch( vitalSigns_Ht )&& isMatch( vitalSigns_Wt ));\r\n  }\r\n\r\n\r\n  /**\r\n    * Emit Numerator and Denominator:\r\n    *   - numerator must also be in denominator\r\n    *   - tagged with physician ID\r\n    */\r\n  var denominator = checkDenominator(),\r\n      numerator   = denominator && checkNumerator(),\r\n      physicianID = \"_\" + patient.json.primary_care_provider_id;\r\n\r\n  emit( \"denominator\" + physicianID, +denominator );\r\n  emit( \"numerator\"   + physicianID, +numerator   );\r\n}\r\n\r\n\r\n/*******************************************************************************\r\n * Helper Functions                                                            *\r\n *   These should be the same for all queries.  Copy a fresh set on every edit!*\r\n ******************************************************************************/\r\n\r\n\r\n/**\r\n * Filters a coded entry list:\r\n *   - parameters 1 & 2: list, codes\r\n *     - conditions(), immunizations(), medications(), results() or vitalSigns()\r\n *     - LOINC, pCLOCD, whoATC, SNOMED-CT, whoATC\r\n *   - parameters 3 - 6: dates or values, keep low/high pairs together\r\n *     - minimum and maximum values\r\n *     - start and end dates\r\n *     --> inclusive range, boundary cases are counted\r\n *     - null/undefined/unsubmitted values are ignored\r\n */\r\nfunction filter_general( list, codes, p3, p4, p5, p6 ){\r\n  // Default variables = undefined\r\n  var min, max, start, end, filteredList;\r\n\r\n  // Check parameters, which can be dates or number values (scalars)\r\n  if(( p3 instanceof Date )&&( p4 instanceof Date )){\r\n    start = p3;\r\n    end   = p4;\r\n    min   = p5;\r\n    max   = p6;\r\n  }\r\n  else if(( p3 instanceof Date )&&(! p4 )){\r\n    start = p3;\r\n  }\r\n  else if(( p3 instanceof Date )&&( typeof p4 === 'number' )){\r\n    start = p3;\r\n    min   = p4;\r\n    max   = p5;\r\n  }\r\n  else if(( typeof p3 === 'number' )&&( typeof p4 === 'number' )){\r\n    min   = p3;\r\n    max   = p4;\r\n    start = p5;\r\n    end   = p6;\r\n  }\r\n  else if(( typeof p3 === 'number' )&&(! p4 )){\r\n    min   = p3;\r\n  }\r\n  else if(( typeof p3 === 'number' )&&( p4 instanceof Date )){\r\n    min   = p3;\r\n    start = p4;\r\n    end   = p5;\r\n  }\r\n\r\n  // Use API's match functions to filter based on codes and dates\r\n  //   - Immunizations, medications and results use an exact code match\r\n  //   - Conditions use a regex match, so make sure to preface with '^'!\r\n  //   - undefined / null values are ignored\r\n  if(( list[0] )&&( list[0].json._type === 'Condition' ))\r\n    filteredList = list.regex_match( codes, start, end );\r\n  else\r\n    filteredList = list.match( codes, start, end );\r\n\r\n  // If there are scalar values (min/max), then filter with them\r\n  if( typeof min === 'number' ){\r\n    // Default value\r\n    max = max || 1000000000;\r\n    filteredList = filter_values( filteredList, min, max );\r\n  }\r\n\r\n  return filteredList;\r\n}\r\n\r\n\r\n/**\r\n * Filters a list of medications:\r\n *   - active status only (20% pad on time interval)\r\n */\r\nfunction filter_activeMeds( matches ){\r\n  var now      = new Date(),\r\n      toReturn = new hQuery.CodedEntryList();\r\n\r\n  for( var i = 0, L = matches.length; i < L; i++ ){\r\n    var drug  = matches[ i ],\r\n        start = drug.indicateMedicationStart().getTime(),\r\n        pad   =( drug.indicateMedicationStop().getTime() - start )* 1.2,\r\n        end   = start + pad;\r\n\r\n    if( start <= now && now <= end )\r\n      toReturn.push( drug );\r\n  }\r\n  return toReturn;\r\n}\r\n\r\n\r\n/**\r\n * Used by filter_general() and filter_general()\r\n *   - inclusive range, boundary cases are counted\r\n */\r\nfunction filter_values( list, min, max ){\r\n  // Default value\r\n  max = max || 1000000000;\r\n\r\n  var toReturn = new hQuery.CodedEntryList();\r\n  for( var i = 0, L = list.length; i < L; i++ ){\r\n    // Try-catch for missing value field in lab results\r\n    try {\r\n      var entry  = list[ i ],\r\n          scalar = entry.values()[ 0 ].scalar();\r\n      if( min <= scalar && scalar <= max )\r\n        toReturn.push( entry );\r\n    }\r\n    catch( err ){\r\n      emit( \"Values key is missing! \" + err, 1 );\r\n    }\r\n  }\r\n  return toReturn;\r\n}\r\n\r\n\r\n/**\r\n * T/F: Does a filtered list contain matches (/is not empty)?\r\n */\r\nfunction isMatch( list ) {\r\n  return 0 < list.length;\r\n}\r\n\r\n\r\n/**\r\n * T/F: Does the patient fall in this age range?\r\n *   - inclusive range, boundary cases are counted\r\n */\r\nfunction isAge( ageMin, ageMax ) {\r\n  // Default values\r\n  ageMax = ageMax || 200;\r\n\r\n  ageNow = patient.age( new Date() );\r\n  return ( ageMin <= ageNow && ageNow <= ageMax );\r\n}\r\n", "reduce" : "function reduce(key, values) {\r\n  return Array.sum(values); \r\n}" }
{ "_type" : "Query", "title" : "PDC-014", "description" : "Pneumococcal vaccination / age 65+", "generated" : false, "user_id" : { "$oid" : "551c1c4a062036a571d114c7" }, "query_structure" : { "find" : { "and" : [] }, "filter" : { "and" : [] }, "extract" : { "selections" : [], "groups" : [] } }, "filter" : "", "map" : "/**\r\n * Query Title: PDC-014\r\n * Query Type:  Ratio\r\n * Description: Pneumococcal vaccination / age 65+\r\n */\r\nfunction map( patient ){\r\n  /**\r\n   * Denominator\r\n   *\r\n   * Base criteria:\r\n   *   - age 65+\r\n   */\r\n  function checkDenominator(){\r\n    // Ages\r\n    var ageMin = 65;\r\n\r\n    // Inclusion/exclusion\r\n    return isAge( ageMin );\r\n  }\r\n\r\n\r\n  /**\r\n   * Numerator\r\n   *\r\n   * Additional criteria:\r\n   *   - <ageMin> to <ageMax> years old\r\n   *   - has { \"convention\": [\"code\", ..., \"\"]} condition, in last 1000000 years\r\n   *   OR\r\n   *   - values <medMin> < <medication> < <medMax>, in last 3 days\r\n   *   - medication is active (filter_medActive())\r\n   */\r\n  function checkNumerator(){\r\n    // Coded entry lists\r\n    var immList  = patient.immunizations(),\r\n\r\n    // Medical codes\r\n        // hhttp://www.whocc.no/atc_ddd_index/\r\n        // http://www.snomedbrowser.com -- use 'Concept Type:' Procedure!\r\n        immCodes ={ \"whoATC\"    :[ \"J07AL02\" ],     // pneumococcus, purified polysaccharides antigen conjugated\r\n                    \"SNOMED-CT\" :[ \"12866006\",      // Pneumococcal vaccination (procedure)\r\n                                   \"394678003\" ]},  // Booster pneumococcal vaccination (procedure)\r\n\r\n    // Filters\r\n    //   - start/end and min/max may be used in either paired order\r\n    //   - values may be ommitted (from right ) as necessary\r\n    immunizations = filter_general( immList, immCodes );\r\n\r\n    // Inclusion/exclusion\r\n    //   - isAge() and isMatch() are boolean (yes/no)\r\n    //   - use && (AND) and || (OR) with brackets (...)\r\n    return isMatch( immunizations );\r\n  }\r\n\r\n\r\n  /**\r\n   * Emit Numerator and Denominator:\r\n   *   - numerator must also be in denominator\r\n   *   - tagged with physician ID\r\n  */\r\n  var denominator = checkDenominator(),\r\n      numerator   = denominator && checkNumerator(),\r\n      physicianID = \"_\" + patient.json.primary_care_provider_id;\r\n\r\n  emit( \"denominator\" + physicianID, +denominator );\r\n  emit( \"numerator\"   + physicianID, +numerator   );\r\n}\r\n\r\n\r\n/*******************************************************************************\r\n * Helper Functions                                                            *\r\n *   These should be the same for all queries.  Copy a fresh set on every edit!*\r\n ******************************************************************************/\r\n\r\n\r\n/**\r\n * Filters a coded entry list:\r\n *   - parameters 1 & 2: list, codes\r\n *     - conditions(), immunizations(), medications(), results() or vitalSigns()\r\n *     - LOINC, pCLOCD, whoATC, SNOMED-CT, whoATC\r\n *   - parameters 3 - 6: dates or values, keep low/high pairs together\r\n *     - minimum and maximum values\r\n *     - start and end dates\r\n *     --> inclusive range, boundary cases are counted\r\n *     - null/undefined/unsubmitted values are ignored\r\n */\r\nfunction filter_general( list, codes, p3, p4, p5, p6 ){\r\n  // Default variables = undefined\r\n  var min, max, start, end, filteredList;\r\n\r\n  // Check parameters, which can be dates or number values (scalars)\r\n  if(( p3 instanceof Date )&&( p4 instanceof Date )){\r\n    start = p3;\r\n    end   = p4;\r\n    min   = p5;\r\n    max   = p6;\r\n  }\r\n  else if(( p3 instanceof Date )&&(! p4 )){\r\n    start = p3;\r\n  }\r\n  else if(( p3 instanceof Date )&&( typeof p4 === 'number' )){\r\n    start = p3;\r\n    min   = p4;\r\n    max   = p5;\r\n  }\r\n  else if(( typeof p3 === 'number' )&&( typeof p4 === 'number' )){\r\n    min   = p3;\r\n    max   = p4;\r\n    start = p5;\r\n    end   = p6;\r\n  }\r\n  else if(( typeof p3 === 'number' )&&(! p4 )){\r\n    min   = p3;\r\n  }\r\n  else if(( typeof p3 === 'number' )&&( p4 instanceof Date )){\r\n    min   = p3;\r\n    start = p4;\r\n    end   = p5;\r\n  }\r\n\r\n  // Use API's match functions to filter based on codes and dates\r\n  //   - Immunizations, medications and results use an exact code match\r\n  //   - Conditions use a regex match, so make sure to preface with '^'!\r\n  //   - undefined / null values are ignored\r\n  if(( list[0] )&&( list[0].json._type === 'Condition' ))\r\n    filteredList = list.regex_match( codes, start, end );\r\n  else\r\n    filteredList = list.match( codes, start, end );\r\n\r\n  // If there are scalar values (min/max), then filter with them\r\n  if( typeof min === 'number' ){\r\n    // Default value\r\n    max = max || 1000000000;\r\n    filteredList = filter_values( filteredList, min, max );\r\n  }\r\n\r\n  return filteredList;\r\n}\r\n\r\n\r\n/**\r\n * Filters a list of medications:\r\n *   - active status only (20% pad on time interval)\r\n */\r\nfunction filter_activeMeds( matches ){\r\n  var now      = new Date(),\r\n      toReturn = new hQuery.CodedEntryList();\r\n\r\n  for( var i = 0, L = matches.length; i < L; i++ ){\r\n    var drug  = matches[ i ],\r\n        start = drug.indicateMedicationStart().getTime(),\r\n        pad   =( drug.indicateMedicationStop().getTime() - start )* 1.2,\r\n        end   = start + pad;\r\n\r\n    if( start <= now && now <= end )\r\n      toReturn.push( drug );\r\n  }\r\n  return toReturn;\r\n}\r\n\r\n\r\n/**\r\n * Used by filter_general() and filter_general()\r\n *   - inclusive range, boundary cases are counted\r\n */\r\nfunction filter_values( list, min, max ){\r\n  // Default value\r\n  max = max || 1000000000;\r\n\r\n  var toReturn = new hQuery.CodedEntryList();\r\n  for( var i = 0, L = list.length; i < L; i++ ){\r\n    // Try-catch for missing value field in lab results\r\n    try {\r\n      var entry  = list[ i ],\r\n          scalar = entry.values()[ 0 ].scalar();\r\n      if( min <= scalar && scalar <= max )\r\n        toReturn.push( entry );\r\n    }\r\n    catch( err ){\r\n      emit( \"Values key is missing! \" + err, 1 );\r\n    }\r\n  }\r\n  return toReturn;\r\n}\r\n\r\n\r\n/**\r\n * T/F: Does a filtered list contain matches (/is not empty)?\r\n */\r\nfunction isMatch( list ) {\r\n  return 0 < list.length;\r\n}\r\n\r\n\r\n/**\r\n * T/F: Does the patient fall in this age range?\r\n *   - inclusive range, boundary cases are counted\r\n */\r\nfunction isAge( ageMin, ageMax ) {\r\n  // Default values\r\n  ageMax = ageMax || 200;\r\n\r\n  ageNow = patient.age( new Date() );\r\n  return ( ageMin <= ageNow && ageNow <= ageMax );\r\n}\r\n", "reduce" : "function reduce(key, values) {\r\n  return Array.sum(values); \r\n}" }
{ "_type" : "Query", "title" : "PDC-009", "description" : "BMI or WC in last 2y / age 20+", "generated" : false, "user_id" : { "$oid" : "551c1c4a062036a571d114c7" }, "query_structure" : { "find" : { "and" : [] }, "filter" : { "and" : [] }, "extract" : { "selections" : [], "groups" : [] } }, "filter" : "", "map" : "/**\r\n * Query Title: PDC-009\r\n * Query Type:  Ratio\r\n * Description: BMI or WC in last 2y / age 20+\r\n */\r\nfunction map( patient ){\r\n  /**\r\n   * Denominator\r\n   *\r\n   * Base criteria:\r\n   *   - age 20+\r\n   */\r\n  function checkDenominator(){\r\n    // Ages\r\n    var ageMin   = 20;\r\n\r\n    // Inclusion/exclusion\r\n    return isAge( ageMin );\r\n  }\r\n\r\n\r\n  /**\r\n   * Numerator\r\n   *\r\n   * Additional criteria:\r\n   *   - has Waist circuference\r\n   *   OR\r\n   *   - has BMI\r\n   *   OR\r\n   *   - has height AND has weight\r\n   *   ---> ALL documented in last 2 years\r\n   */\r\n  function checkNumerator(){\r\n    // Dates\r\n    var end      = new Date(),\r\n        vitStart = new Date( end.getFullYear() - 2, end.getMonth(), end.getDate() ),\r\n\r\n    // Coded entry lists\r\n        vitList  = patient.vitalSigns(),\r\n\r\n    // Medical codes\r\n        // http://search.loinc.org/search.zul\r\n        vitCodes_WC ={ \"LOINC\" :[ \"56115-9\" ]},  // Waist Circumference by NCFS\r\n        vitCodes_BM ={ \"LOINC\" :[ \"39156-5\" ]},  // Body mass index (BMI) [Ratio]\r\n        vitCodes_Ht ={ \"LOINC\" :[ \"8302-2\" ]},   // Body height\r\n        vitCodes_Wt ={ \"LOINC\" :[ \"3141-9\" ]},   // Body weight Measured\r\n\r\n    // Filters\r\n    //   - start/end and min/max may be used in either paired order\r\n    //   - values and dates may be ommitted as necessary\r\n        vitalSigns_WC    = filter_general( vitList, vitCodes_WC, vitStart ),\r\n        vitalSigns_BM    = filter_general( vitList, vitCodes_BM, vitStart ),\r\n        vitalSigns_Ht    = filter_general( vitList, vitCodes_Ht, vitStart ),\r\n        vitalSigns_Wt    = filter_general( vitList, vitCodes_Wt, vitStart );\r\n\r\n    // Inclusion/exclusion\r\n    //   - isAge() and isMatch() are boolean (yes/no)\r\n    //   - use && (AND) and || (OR) with brackets (...)\r\n    return isMatch( vitalSigns_WC )||\r\n           isMatch( vitalSigns_BM )||\r\n           ( isMatch( vitalSigns_Ht )&& isMatch( vitalSigns_Wt ));\r\n  }\r\n\r\n\r\n  /**\r\n   * Emit Numerator and Denominator:\r\n   *   - numerator must also be in denominator\r\n   *   - tagged with physician ID\r\n   */\r\n  var denominator = checkDenominator(),\r\n      numerator   = denominator && checkNumerator(),\r\n      physicianID = \"_\" + patient.json.primary_care_provider_id;\r\n\r\n  emit( \"denominator\" + physicianID, +denominator );\r\n  emit( \"numerator\"   + physicianID, +numerator   );\r\n}\r\n\r\n\r\n/*******************************************************************************\r\n * Helper Functions                                                            *\r\n *   These should be the same for all queries.  Copy a fresh set on every edit!*\r\n ******************************************************************************/\r\n\r\n\r\n/**\r\n * Filters a coded entry list:\r\n *   - parameters 1 & 2: list, codes\r\n *     - conditions(), immunizations(), medications(), results() or vitalSigns()\r\n *     - LOINC, pCLOCD, whoATC, SNOMED-CT, whoATC\r\n *   - parameters 3 - 6: dates or values, keep low/high pairs together\r\n *     - minimum and maximum values\r\n *     - start and end dates\r\n *     --> inclusive range, boundary cases are counted\r\n *     - null/undefined/unsubmitted values are ignored\r\n */\r\nfunction filter_general( list, codes, p3, p4, p5, p6 ){\r\n  // Default variables = undefined\r\n  var min, max, start, end, filteredList;\r\n\r\n  // Check parameters, which can be dates or number values (scalars)\r\n  if(( p3 instanceof Date )&&( p4 instanceof Date )){\r\n    start = p3;\r\n    end   = p4;\r\n    min   = p5;\r\n    max   = p6;\r\n  }\r\n  else if(( p3 instanceof Date )&&(! p4 )){\r\n    start = p3;\r\n  }\r\n  else if(( p3 instanceof Date )&&( typeof p4 === 'number' )){\r\n    start = p3;\r\n    min   = p4;\r\n    max   = p5;\r\n  }\r\n  else if(( typeof p3 === 'number' )&&( typeof p4 === 'number' )){\r\n    min   = p3;\r\n    max   = p4;\r\n    start = p5;\r\n    end   = p6;\r\n  }\r\n  else if(( typeof p3 === 'number' )&&(! p4 )){\r\n    min   = p3;\r\n  }\r\n  else if(( typeof p3 === 'number' )&&( p4 instanceof Date )){\r\n    min   = p3;\r\n    start = p4;\r\n    end   = p5;\r\n  }\r\n\r\n  // Use API's match functions to filter based on codes and dates\r\n  //   - Immunizations, medications and results use an exact code match\r\n  //   - Conditions use a regex match, so make sure to preface with '^'!\r\n  //   - undefined / null values are ignored\r\n  if(( list[0] )&&( list[0].json._type === 'Condition' ))\r\n    filteredList = list.regex_match( codes, start, end );\r\n  else\r\n    filteredList = list.match( codes, start, end );\r\n\r\n  // If there are scalar values (min/max), then filter with them\r\n  if( typeof min === 'number' ){\r\n    // Default value\r\n    max = max || 1000000000;\r\n    filteredList = filter_values( filteredList, min, max );\r\n  }\r\n\r\n  return filteredList;\r\n}\r\n\r\n\r\n/**\r\n * Filters a list of medications:\r\n *   - active status only (20% pad on time interval)\r\n */\r\nfunction filter_activeMeds( matches ){\r\n  var now      = new Date(),\r\n      toReturn = new hQuery.CodedEntryList();\r\n\r\n  for( var i = 0, L = matches.length; i < L; i++ ){\r\n    var drug  = matches[ i ],\r\n        start = drug.indicateMedicationStart().getTime(),\r\n        pad   =( drug.indicateMedicationStop().getTime() - start )* 1.2,\r\n        end   = start + pad;\r\n\r\n    if( start <= now && now <= end )\r\n      toReturn.push( drug );\r\n  }\r\n  return toReturn;\r\n}\r\n\r\n\r\n/**\r\n * Used by filter_general() and filter_general()\r\n *   - inclusive range, boundary cases are counted\r\n */\r\nfunction filter_values( list, min, max ){\r\n  // Default value\r\n  max = max || 1000000000;\r\n\r\n  var toReturn = new hQuery.CodedEntryList();\r\n  for( var i = 0, L = list.length; i < L; i++ ){\r\n    // Try-catch for missing value field in lab results\r\n    try {\r\n      var entry  = list[ i ],\r\n          scalar = entry.values()[ 0 ].scalar();\r\n      if( min <= scalar && scalar <= max )\r\n        toReturn.push( entry );\r\n    }\r\n    catch( err ){\r\n      emit( \"Values key is missing! \" + err, 1 );\r\n    }\r\n  }\r\n  return toReturn;\r\n}\r\n\r\n\r\n/**\r\n * T/F: Does a filtered list contain matches (/is not empty)?\r\n */\r\nfunction isMatch( list ) {\r\n  return 0 < list.length;\r\n}\r\n\r\n\r\n/**\r\n * T/F: Does the patient fall in this age range?\r\n *   - inclusive range, boundary cases are counted\r\n */\r\nfunction isAge( ageMin, ageMax ) {\r\n  // Default values\r\n  ageMax = ageMax || 200;\r\n\r\n  ageNow = patient.age( new Date() );\r\n  return ( ageMin <= ageNow && ageNow <= ageMax );\r\n}\r\n", "reduce" : "function reduce(key, values) {\r\n  return Array.sum(values); \r\n}" }
{ "_type" : "Query", "title" : "PDC-020", "description" : "Colon screening in last 2y / age 50-74", "generated" : false, "user_id" : { "$oid" : "551c1c4a062036a571d114c7" }, "query_structure" : { "find" : { "and" : [] }, "filter" : { "and" : [] }, "extract" : { "selections" : [], "groups" : [] } }, "filter" : "", "map" : "/**\r\n * Query Title: PDC-020\r\n * Query Type:  Ratio\r\n * Desctiption: Colon screening in last 2y / age 50-74\r\n */\r\nfunction map( patient ){\r\n  /**\r\n   * Denominator\r\n   *\r\n   * Base criteria:\r\n   *   - 50 to 74 years old\r\n   */\r\n  function checkDenominator(){\r\n    // Values\r\n    var ageMin = 50,\r\n        ageMax = 74;\r\n\r\n    return isAge( ageMin );\r\n  }\r\n\r\n\r\n  /**\r\n   * Numerator\r\n   *\r\n   * Additional criteria:\r\n   *   - have received a colon cancer screening (hemoccult test)\r\n   *   --> tested in the last two years\r\n   *   OR\r\n   *   --> tested in the last five years\r\n   *   - AND\r\n   *   --- have received a colonoscopy OR sigmoidoscopy\r\n   *   ----> in the last five years\r\n   */\r\n  function checkNumerator(){\r\n    // Values\r\n    var now    = new Date(),\r\n        back2y = new Date( now.getFullYear() - 2, now.getMonth(), now.getDate() ),\r\n        back5y = new Date( now.getFullYear() - 5, now.getMonth(), now.getDate() ),\r\n\r\n    // List of results, result codes (hemoccult)\r\n        resList     = patient.results(),\r\n\r\n    // http://search.loinc.org/search.zul?query=hemoccult\r\n        resCodes_Hc ={ \"pCLOCD\":[ \"14563-1\",   // Hemoglobin.gastrointestinal [Presence] in Stool --1st specimen\r\n                                  \"14564-9\",   // Hemoglobin.gastrointestinal [Presence] in Stool --2nd specimen\r\n                                  \"14565-6\",   // Hemoglobin.gastrointestinal [Presence] in Stool --3rd specimen\r\n                                  \"58453-2\"]}, // Hemoglobin.gastrointestinal [Mass/​volume] in Stool by Immunologic method\r\n\r\n    // http://search.loinc.org/search.zul?query=colonoscopy\r\n        resCodes_CS ={ \"LOINC\":[ \"18746-8\",    // Colonoscopy study\r\n                                 \"28022-2\",    // Colonoscopy Study observation Narrative\r\n                                 \"28023-0\",    // Colonoscopy Study observation\r\n                                 \"28033-9\",    // Colonoscopy.thru stoma Study observation Narrative\r\n                                 \"28034-7\",    // Colonoscopy.thru stoma Study observation\r\n\r\n    // http://search.loinc.org/search.zul?query=sigmoidoscopy\r\n                                 \"18753-4\",    // Flexible sigmoidoscopy study\r\n                                 \"19795-4\",    // Insertion depth Gastrointestine lower Flexible sigmoidoscopy\r\n                                 \"28026-3\",    // Flexible sigmoidoscopy Study observation Narrative\r\n                                 \"28027-1\"]},  // Flexible sigmoidoscopy Study observation\r\n\r\n    // Filters\r\n        results_CS_5y = filter_general( resList, resCodes_Hc, back5y ),\r\n        results_Hc_5y = filter_general( resList, resCodes_Hc, back5y ),\r\n        results_Hc_2y = filter_general( results_Hc_5y, resCodes_Hc, back2y );\r\n\r\n    return isMatch( results_Hc_2y )||\r\n           ( isMatch( results_Hc_5y )&& isMatch( results_CS_5y ));\r\n  }\r\n\r\n\r\n  /**\r\n   * Emit Numerator and Denominator:\r\n   *   - numerator must also be in denominator\r\n   *   - tagged with physician ID\r\n   */\r\n  var denominator = checkDenominator(),\r\n      numerator   = denominator && checkNumerator(),\r\n      physicianID = \"_\" + patient.json.primary_care_provider_id;\r\n\r\n  emit( \"denominator\" + physicianID, +denominator );\r\n  emit( \"numerator\"   + physicianID, +numerator   );\r\n}\r\n\r\n\r\n/*******************************************************************************\r\n * Helper Functions                                                            *\r\n *   These should be the same for all queries.  Copy a fresh set on every edit!*\r\n ******************************************************************************/\r\n\r\n\r\n/**\r\n * Filters a coded entry list:\r\n *   - parameters 1 & 2: list, codes\r\n *     - conditions(), immunizations(), medications(), results() or vitalSigns()\r\n *     - LOINC, pCLOCD, whoATC, SNOMED-CT, whoATC\r\n *   - parameters 3 - 6: dates or values, keep low/high pairs together\r\n *     - minimum and maximum values\r\n *     - start and end dates\r\n *     --> inclusive range, boundary cases are counted\r\n *     - null/undefined/unsubmitted values are ignored\r\n */\r\nfunction filter_general( list, codes, p3, p4, p5, p6 ){\r\n  // Default variables = undefined\r\n  var min, max, start, end, filteredList;\r\n\r\n  // Check parameters, which can be dates or number values (scalars)\r\n  if(( p3 instanceof Date )&&( p4 instanceof Date )){\r\n    start = p3;\r\n    end   = p4;\r\n    min   = p5;\r\n    max   = p6;\r\n  }\r\n  else if(( p3 instanceof Date )&&(! p4 )){\r\n    start = p3;\r\n  }\r\n  else if(( p3 instanceof Date )&&( typeof p4 === 'number' )){\r\n    start = p3;\r\n    min   = p4;\r\n    max   = p5;\r\n  }\r\n  else if(( typeof p3 === 'number' )&&( typeof p4 === 'number' )){\r\n    min   = p3;\r\n    max   = p4;\r\n    start = p5;\r\n    end   = p6;\r\n  }\r\n  else if(( typeof p3 === 'number' )&&(! p4 )){\r\n    min   = p3;\r\n  }\r\n  else if(( typeof p3 === 'number' )&&( p4 instanceof Date )){\r\n    min   = p3;\r\n    start = p4;\r\n    end   = p5;\r\n  }\r\n\r\n  // Use API's match functions to filter based on codes and dates\r\n  //   - Immunizations, medications and results use an exact code match\r\n  //   - Conditions use a regex match, so make sure to preface with '^'!\r\n  //   - undefined / null values are ignored\r\n  if(( list[0] )&&( list[0].json._type === 'Condition' ))\r\n    filteredList = list.regex_match( codes, start, end );\r\n  else\r\n    filteredList = list.match( codes, start, end );\r\n\r\n  // If there are scalar values (min/max), then filter with them\r\n  if( typeof min === 'number' ){\r\n    // Default value\r\n    max = max || 1000000000;\r\n    filteredList = filter_values( filteredList, min, max );\r\n  }\r\n\r\n  return filteredList;\r\n}\r\n\r\n\r\n/**\r\n * Filters a list of medications:\r\n *   - active status only (20% pad on time interval)\r\n */\r\nfunction filter_activeMeds( matches ){\r\n  var now      = new Date(),\r\n      toReturn = new hQuery.CodedEntryList();\r\n\r\n  for( var i = 0, L = matches.length; i < L; i++ ){\r\n    var drug  = matches[ i ],\r\n        start = drug.indicateMedicationStart().getTime(),\r\n        pad   =( drug.indicateMedicationStop().getTime() - start )* 1.2,\r\n        end   = start + pad;\r\n\r\n    if( start <= now && now <= end )\r\n      toReturn.push( drug );\r\n  }\r\n  return toReturn;\r\n}\r\n\r\n\r\n/**\r\n * Used by filter_general() and filter_general()\r\n *   - inclusive range, boundary cases are counted\r\n */\r\nfunction filter_values( list, min, max ){\r\n  // Default value\r\n  max = max || 1000000000;\r\n\r\n  var toReturn = new hQuery.CodedEntryList();\r\n  for( var i = 0, L = list.length; i < L; i++ ){\r\n    // Try-catch for missing value field in lab results\r\n    try {\r\n      var entry  = list[ i ],\r\n          scalar = entry.values()[ 0 ].scalar();\r\n      if( min <= scalar && scalar <= max )\r\n        toReturn.push( entry );\r\n    }\r\n    catch( err ){\r\n      emit( \"Values key is missing! \" + err, 1 );\r\n    }\r\n  }\r\n  return toReturn;\r\n}\r\n\r\n\r\n/**\r\n * T/F: Does a filtered list contain matches (/is not empty)?\r\n */\r\nfunction isMatch( list ) {\r\n  return 0 < list.length;\r\n}\r\n\r\n\r\n/**\r\n * T/F: Does the patient fall in this age range?\r\n *   - inclusive range, boundary cases are counted\r\n */\r\nfunction isAge( ageMin, ageMax ) {\r\n  // Default values\r\n  ageMax = ageMax || 200;\r\n\r\n  ageNow = patient.age( new Date() );\r\n  return ( ageMin <= ageNow && ageNow <= ageMax );\r\n}\r\n", "reduce" : "function reduce(key, values) {\r\n  return Array.sum(values); \r\n}" }
{ "_type" : "Query", "title" : "PDC-022", "description" : "Fasting blood sugar in last 3y / age 46+", "generated" : false, "user_id" : { "$oid" : "551c1c4a062036a571d114c7" }, "query_structure" : { "find" : { "and" : [] }, "filter" : { "and" : [] }, "extract" : { "selections" : [], "groups" : [] } }, "filter" : "", "map" : "/**\r\n * Query Title: PDC-022\r\n * Query Type:  Ratio\r\n * Description: Fasting blood sugar in last 3y / age 46+\r\n */\r\nfunction map( patient ){\r\n  /**\r\n   * Denominator\r\n   *\r\n   * Base criteria:\r\n   *   - 46+ years old\r\n   */\r\n  function checkDenominator(){\r\n    // Values\r\n    var ageMin = 46;\r\n\r\n    // Inclusion/exclusion\r\n    return isAge( ageMin );\r\n  }\r\n\r\n\r\n  /**\r\n   * Numerator\r\n   *\r\n   * Additional criteria:\r\n   *   - has had fasting glucose (blood sugar) recorded\r\n   *   --> tested in the last three years\r\n   */\r\n  function checkNumerator(){\r\n    // Values\r\n    var end   = new Date(),\r\n        start = new Date( end.getFullYear() - 3, end.getMonth(), end.getDate() ),\r\n\r\n      // Coded entry lists\r\n        resList  = patient.results(),\r\n\r\n      // Medical codes\r\n      // http://search.loinc.org/search.zul?query=fasting+glucose\r\n        resCodes ={ \"pCLOCD\":[ \"14771-0\" ]}, // Fasting glucose [Moles/​volume] in Serum or Plasma\r\n\r\n    // Filters\r\n      results = filter_general( resList, resCodes, start, end );\r\n\r\n    // Inclusion/exclusion\r\n    return isMatch( results );\r\n  }\r\n\r\n\r\n  /**\r\n   * Emit Numerator and Denominator:\r\n   *   - numerator must also be in denominator\r\n   *   - tagged with physician ID\r\n   */\r\n  var denominator = checkDenominator(),\r\n      numerator   = denominator && checkNumerator(),\r\n      physicianID = \"_\" + patient.json.primary_care_provider_id;\r\n\r\n  emit( \"denominator\" + physicianID, +denominator );\r\n  emit( \"numerator\"   + physicianID, +numerator   );\r\n}\r\n\r\n\r\n/*******************************************************************************\r\n * Helper Functions                                                            *\r\n *   These should be the same for all queries.  Copy a fresh set on every edit!*\r\n ******************************************************************************/\r\n\r\n\r\n/**\r\n * Filters a coded entry list:\r\n *   - parameters 1 & 2: list, codes\r\n *     - conditions(), immunizations(), medications(), results() or vitalSigns()\r\n *     - LOINC, pCLOCD, whoATC, SNOMED-CT, whoATC\r\n *   - parameters 3 - 6: dates or values, keep low/high pairs together\r\n *     - minimum and maximum values\r\n *     - start and end dates\r\n *     --> inclusive range, boundary cases are counted\r\n *     - null/undefined/unsubmitted values are ignored\r\n */\r\nfunction filter_general( list, codes, p3, p4, p5, p6 ){\r\n  // Default variables = undefined\r\n  var min, max, start, end, filteredList;\r\n\r\n  // Check parameters, which can be dates or number values (scalars)\r\n  if(( p3 instanceof Date )&&( p4 instanceof Date )){\r\n    start = p3;\r\n    end   = p4;\r\n    min   = p5;\r\n    max   = p6;\r\n  }\r\n  else if(( p3 instanceof Date )&&(! p4 )){\r\n    start = p3;\r\n  }\r\n  else if(( p3 instanceof Date )&&( typeof p4 === 'number' )){\r\n    start = p3;\r\n    min   = p4;\r\n    max   = p5;\r\n  }\r\n  else if(( typeof p3 === 'number' )&&( typeof p4 === 'number' )){\r\n    min   = p3;\r\n    max   = p4;\r\n    start = p5;\r\n    end   = p6;\r\n  }\r\n  else if(( typeof p3 === 'number' )&&(! p4 )){\r\n    min   = p3;\r\n  }\r\n  else if(( typeof p3 === 'number' )&&( p4 instanceof Date )){\r\n    min   = p3;\r\n    start = p4;\r\n    end   = p5;\r\n  }\r\n\r\n  // Use API's match functions to filter based on codes and dates\r\n  //   - Immunizations, medications and results use an exact code match\r\n  //   - Conditions use a regex match, so make sure to preface with '^'!\r\n  //   - undefined / null values are ignored\r\n  if(( list[0] )&&( list[0].json._type === 'Condition' ))\r\n    filteredList = list.regex_match( codes, start, end );\r\n  else\r\n    filteredList = list.match( codes, start, end );\r\n\r\n  // If there are scalar values (min/max), then filter with them\r\n  if( typeof min === 'number' ){\r\n    // Default value\r\n    max = max || 1000000000;\r\n    filteredList = filter_values( filteredList, min, max );\r\n  }\r\n\r\n  return filteredList;\r\n}\r\n\r\n\r\n/**\r\n * Filters a list of medications:\r\n *   - active status only (20% pad on time interval)\r\n */\r\nfunction filter_activeMeds( matches ){\r\n  var now      = new Date(),\r\n      toReturn = new hQuery.CodedEntryList();\r\n\r\n  for( var i = 0, L = matches.length; i < L; i++ ){\r\n    var drug  = matches[ i ],\r\n        start = drug.indicateMedicationStart().getTime(),\r\n        pad   =( drug.indicateMedicationStop().getTime() - start )* 1.2,\r\n        end   = start + pad;\r\n\r\n    if( start <= now && now <= end )\r\n      toReturn.push( drug );\r\n  }\r\n  return toReturn;\r\n}\r\n\r\n\r\n/**\r\n * Used by filter_general() and filter_general()\r\n *   - inclusive range, boundary cases are counted\r\n */\r\nfunction filter_values( list, min, max ){\r\n  // Default value\r\n  max = max || 1000000000;\r\n\r\n  var toReturn = new hQuery.CodedEntryList();\r\n  for( var i = 0, L = list.length; i < L; i++ ){\r\n    // Try-catch for missing value field in lab results\r\n    try {\r\n      var entry  = list[ i ],\r\n          scalar = entry.values()[ 0 ].scalar();\r\n      if( min <= scalar && scalar <= max )\r\n        toReturn.push( entry );\r\n    }\r\n    catch( err ){\r\n      emit( \"Values key is missing! \" + err, 1 );\r\n    }\r\n  }\r\n  return toReturn;\r\n}\r\n\r\n\r\n/**\r\n * T/F: Does a filtered list contain matches (/is not empty)?\r\n */\r\nfunction isMatch( list ) {\r\n  return 0 < list.length;\r\n}\r\n\r\n\r\n/**\r\n * T/F: Does the patient fall in this age range?\r\n *   - inclusive range, boundary cases are counted\r\n */\r\nfunction isAge( ageMin, ageMax ) {\r\n  // Default values\r\n  ageMax = ageMax || 200;\r\n\r\n  ageNow = patient.age( new Date() );\r\n  return ( ageMin <= ageNow && ageNow <= ageMax );\r\n}\r\n", "reduce" : "function reduce(key, values) {\r\n  return Array.sum(values); \r\n}" }
{ "_type" : "Query", "title" : "PDC-025", "description" : "HGBA1C in last 6m / diabetes", "generated" : false, "user_id" : { "$oid" : "551c1c4a062036a571d114c7" }, "query_structure" : { "find" : { "and" : [] }, "filter" : { "and" : [] }, "extract" : { "selections" : [], "groups" : [] } }, "filter" : "", "map" : "/**\r\n * Query Title: PDC-025\r\n * Query Type:  Ratio\r\n * Description: HGBA1C in last 6m / diabetes\r\n */\r\nfunction map( patient ){\r\n  /**\r\n   * Denominator\r\n   *\r\n   * Base criteria:\r\n   *   - diagnosed with diabetes\r\n   */\r\n  function checkDenominator(){\r\n    // Coded entry lists\r\n    var conList       = patient.conditions(),\r\n\r\n    // Medical codes\r\n        // http://www.cms.gov/medicare-coverage-database/staticpages/icd-9-code-lookup.aspx?KeyWord=diabetes\r\n        conCodes      ={ \"ICD9\"      :[ \"^250\" ]},  // Diabetes, types 1 and 2\r\n\r\n    // Filters\r\n        conditions    = filter_general( conList, conCodes );\r\n\r\n    // Inclusion/exclusion\r\n    return isMatch( conditions );\r\n  }\r\n\r\n\r\n  /**\r\n   * Numerator\r\n   *\r\n   * Additional criteria:\r\n   *   - HGBA1C recorded\r\n   *   ---> in last year\r\n   */\r\n  function checkNumerator(){\r\n    // Values\r\n    // Dates\r\n    //   - end:   () for current date, otherwise ( YYYY, MM, DD )\r\n    //   - start: subtract from end as Y, M, D\r\n    var end      = new Date(),\r\n        resStart = new Date( end.getFullYear(), end.getMonth() - 6, end.getDate() ),\r\n\r\n    // Lists\r\n        resList  = patient.results(),\r\n\r\n    // Medical codes\r\n    // http://search.loinc.org/search.zul?query=hemoglobin+a1c\r\n        resCodes ={ \"pCLOCD\"    :[ \"4548-4\", ]}, // Hemoglobin A1c/​Hemoglobin.total in Blood\r\n\r\n    // Filters\r\n        results       = filter_general( resList, resCodes, resStart );\r\n\r\n    // Inclusion/exclusion\r\n    return isMatch( results );\r\n  }\r\n\r\n\r\n  /**\r\n   * Emit Numerator and Denominator:\r\n   *   - numerator must also be in denominator\r\n   *   - tagged with physician ID\r\n   */\r\n  var denominator = checkDenominator(),\r\n      numerator   = denominator && checkNumerator(),\r\n      physicianID = \"_\" + patient.json.primary_care_provider_id;\r\n\r\n  emit( \"denominator\" + physicianID, +denominator );\r\n  emit( \"numerator\"   + physicianID, +numerator   );\r\n}\r\n\r\n\r\n/*******************************************************************************\r\n * Helper Functions                                                            *\r\n *   These should be the same for all queries.  Copy a fresh set on every edit!*\r\n ******************************************************************************/\r\n\r\n\r\n/**\r\n * Filters a coded entry list:\r\n *   - parameters 1 & 2: list, codes\r\n *     - conditions(), immunizations(), medications(), results() or vitalSigns()\r\n *     - LOINC, pCLOCD, whoATC, SNOMED-CT, whoATC\r\n *   - parameters 3 - 6: dates or values, keep low/high pairs together\r\n *     - minimum and maximum values\r\n *     - start and end dates\r\n *     --> inclusive range, boundary cases are counted\r\n *     - null/undefined/unsubmitted values are ignored\r\n */\r\nfunction filter_general( list, codes, p3, p4, p5, p6 ){\r\n  // Default variables = undefined\r\n  var min, max, start, end, filteredList;\r\n\r\n  // Check parameters, which can be dates or number values (scalars)\r\n  if(( p3 instanceof Date )&&( p4 instanceof Date )){\r\n    start = p3;\r\n    end   = p4;\r\n    min   = p5;\r\n    max   = p6;\r\n  }\r\n  else if(( p3 instanceof Date )&&(! p4 )){\r\n    start = p3;\r\n  }\r\n  else if(( p3 instanceof Date )&&( typeof p4 === 'number' )){\r\n    start = p3;\r\n    min   = p4;\r\n    max   = p5;\r\n  }\r\n  else if(( typeof p3 === 'number' )&&( typeof p4 === 'number' )){\r\n    min   = p3;\r\n    max   = p4;\r\n    start = p5;\r\n    end   = p6;\r\n  }\r\n  else if(( typeof p3 === 'number' )&&(! p4 )){\r\n    min   = p3;\r\n  }\r\n  else if(( typeof p3 === 'number' )&&( p4 instanceof Date )){\r\n    min   = p3;\r\n    start = p4;\r\n    end   = p5;\r\n  }\r\n\r\n  // Use API's match functions to filter based on codes and dates\r\n  //   - Immunizations, medications and results use an exact code match\r\n  //   - Conditions use a regex match, so make sure to preface with '^'!\r\n  //   - undefined / null values are ignored\r\n  if(( list[0] )&&( list[0].json._type === 'Condition' ))\r\n    filteredList = list.regex_match( codes, start, end );\r\n  else\r\n    filteredList = list.match( codes, start, end );\r\n\r\n  // If there are scalar values (min/max), then filter with them\r\n  if( typeof min === 'number' ){\r\n    // Default value\r\n    max = max || 1000000000;\r\n    filteredList = filter_values( filteredList, min, max );\r\n  }\r\n\r\n  return filteredList;\r\n}\r\n\r\n\r\n/**\r\n * Filters a list of medications:\r\n *   - active status only (20% pad on time interval)\r\n */\r\nfunction filter_activeMeds( matches ){\r\n  var now      = new Date(),\r\n      toReturn = new hQuery.CodedEntryList();\r\n\r\n  for( var i = 0, L = matches.length; i < L; i++ ){\r\n    var drug  = matches[ i ],\r\n        start = drug.indicateMedicationStart().getTime(),\r\n        pad   =( drug.indicateMedicationStop().getTime() - start )* 1.2,\r\n        end   = start + pad;\r\n\r\n    if( start <= now && now <= end )\r\n      toReturn.push( drug );\r\n  }\r\n  return toReturn;\r\n}\r\n\r\n\r\n/**\r\n * Used by filter_general() and filter_general()\r\n *   - inclusive range, boundary cases are counted\r\n */\r\nfunction filter_values( list, min, max ){\r\n  // Default value\r\n  max = max || 1000000000;\r\n\r\n  var toReturn = new hQuery.CodedEntryList();\r\n  for( var i = 0, L = list.length; i < L; i++ ){\r\n    // Try-catch for missing value field in lab results\r\n    try {\r\n      var entry  = list[ i ],\r\n          scalar = entry.values()[ 0 ].scalar();\r\n      if( min <= scalar && scalar <= max )\r\n        toReturn.push( entry );\r\n    }\r\n    catch( err ){\r\n      emit( \"Values key is missing! \" + err, 1 );\r\n    }\r\n  }\r\n  return toReturn;\r\n}\r\n\r\n\r\n/**\r\n * T/F: Does a filtered list contain matches (/is not empty)?\r\n */\r\nfunction isMatch( list ) {\r\n  return 0 < list.length;\r\n}\r\n\r\n\r\n/**\r\n * T/F: Does the patient fall in this age range?\r\n *   - inclusive range, boundary cases are counted\r\n */\r\nfunction isAge( ageMin, ageMax ) {\r\n  // Default values\r\n  ageMax = ageMax || 200;\r\n\r\n  ageNow = patient.age( new Date() );\r\n  return ( ageMin <= ageNow && ageNow <= ageMax );\r\n}\r\n", "reduce" : "function reduce(key, values) {\r\n  return Array.sum(values); \r\n}" }
{ "_type" : "Query", "title" : "PDC-026", "description" : "HGBA1C >= 7% in last 12m / diabetes", "generated" : false, "user_id" : { "$oid" : "551c1c4a062036a571d114c7" }, "query_structure" : { "find" : { "and" : [] }, "filter" : { "and" : [] }, "extract" : { "selections" : [], "groups" : [] } }, "filter" : "", "map" : "/**\r\n* Query Title: PDC-027\r\n* Query Type:  Ratio\r\n* Description: LDL >= 2.5 mmol/L in last year / for patients with diabetes\r\n*/\r\nfunction map( patient ){\r\n  /**\r\n  * Denominator\r\n  *\r\n  * Base criteria:\r\n  *   - diagnosed with diabetes\r\n  */\r\n  function checkDenominator(){\r\n    // Coded entry lists\r\n    var conList       = patient.conditions(),\r\n\r\n    // Medical codes - http://www.cms.gov/medicare-coverage-database/staticpages/icd-9-code-lookup.aspx?KeyWord=diabetes\r\n        conCodes      ={ \"ICD9\"      :[ \"^250\" ]},  // Diabetes, types 1 and 2\r\n\r\n    // Filters\r\n        conditions    = filter_general( conList, conCodes );\r\n\r\n    // Inclusion/exclusion\r\n    return isMatch( conditions );\r\n  }\r\n\r\n\r\n  /**\r\n  * Numerator\r\n  *\r\n  * Additional criteria:\r\n  *   - LDL recorded\r\n  *   ---> LDL >= 2.5 mmol/L\r\n  *   ---> in last six months\r\n  */\r\n  function checkNumerator(){\r\n    // Values\r\n    //   - ages and min/max values\r\n    var resMin   = 2.5,\r\n\r\n    // Dates\r\n    //   - end:   () for current date, otherwise ( YYYY, MM, DD )\r\n    //   - start: subtract from end as Y, M, D\r\n        end      = new Date(),\r\n        resStart = new Date( end.getFullYear() - 1, end.getMonth(), end.getDate() ),\r\n\r\n    // Lists\r\n        resList  = patient.results(),\r\n\r\n    // Medical codes\r\n    // http://search.loinc.org/search.zul?query=%22Cholesterol.in+LDL%22+-HDL\r\n        resCodes ={ \"pCLOCD\"    :[ \"39469-2\" ]}, // Cholesterol in LDL [Moles/​volume] in Serum or Plasma by calculation\r\n\r\n    // Filters\r\n        results       = filter_general( resList, resCodes, resMin, resStart );\r\n\r\n    // Inclusion/exclusion\r\n    return isMatch( results );\r\n  }\r\n\r\n\r\n  /**\r\n  * Emit Numerator and Denominator:\r\n  *   - numerator must also be in denominator\r\n  *   - tagged with physician ID\r\n  */\r\n  var denominator = checkDenominator(),\r\n      numerator   = denominator && checkNumerator(),\r\n      physicianID = \"_\" + patient.json.primary_care_provider_id;\r\n\r\n  emit( \"denominator\" + physicianID, +denominator );\r\n  emit( \"numerator\"   + physicianID, +numerator   );\r\n}\r\n\r\n\r\n/*******************************************************************************\r\n * Helper Functions                                                            *\r\n *   These should be the same for all queries.  Copy a fresh set on every edit!*\r\n ******************************************************************************/\r\n\r\n\r\n/**\r\n * Filters a coded entry list:\r\n *   - parameters 1 & 2: list, codes\r\n *     - conditions(), immunizations(), medications(), results() or vitalSigns()\r\n *     - LOINC, pCLOCD, whoATC, SNOMED-CT, whoATC\r\n *   - parameters 3 - 6: dates or values, keep low/high pairs together\r\n *     - minimum and maximum values\r\n *     - start and end dates\r\n *     --> inclusive range, boundary cases are counted\r\n *     - null/undefined/unsubmitted values are ignored\r\n */\r\nfunction filter_general( list, codes, p3, p4, p5, p6 ){\r\n  // Default variables = undefined\r\n  var min, max, start, end, filteredList;\r\n\r\n  // Check parameters, which can be dates or number values (scalars)\r\n  if(( p3 instanceof Date )&&( p4 instanceof Date )){\r\n    start = p3;\r\n    end   = p4;\r\n    min   = p5;\r\n    max   = p6;\r\n  }\r\n  else if(( p3 instanceof Date )&&(! p4 )){\r\n    start = p3;\r\n  }\r\n  else if(( p3 instanceof Date )&&( typeof p4 === 'number' )){\r\n    start = p3;\r\n    min   = p4;\r\n    max   = p5;\r\n  }\r\n  else if(( typeof p3 === 'number' )&&( typeof p4 === 'number' )){\r\n    min   = p3;\r\n    max   = p4;\r\n    start = p5;\r\n    end   = p6;\r\n  }\r\n  else if(( typeof p3 === 'number' )&&(! p4 )){\r\n    min   = p3;\r\n  }\r\n  else if(( typeof p3 === 'number' )&&( p4 instanceof Date )){\r\n    min   = p3;\r\n    start = p4;\r\n    end   = p5;\r\n  }\r\n\r\n  // Use API's match functions to filter based on codes and dates\r\n  //   - Immunizations, medications and results use an exact code match\r\n  //   - Conditions use a regex match, so make sure to preface with '^'!\r\n  //   - undefined / null values are ignored\r\n  if(( list[0] )&&( list[0].json._type === 'Condition' ))\r\n    filteredList = list.regex_match( codes, start, end );\r\n  else\r\n    filteredList = list.match( codes, start, end );\r\n\r\n  // If there are scalar values (min/max), then filter with them\r\n  if( typeof min === 'number' ){\r\n    // Default value\r\n    max = max || 1000000000;\r\n    filteredList = filter_values( filteredList, min, max );\r\n  }\r\n\r\n  return filteredList;\r\n}\r\n\r\n\r\n/**\r\n * Filters a list of medications:\r\n *   - active status only (20% pad on time interval)\r\n */\r\nfunction filter_activeMeds( matches ){\r\n  var now      = new Date(),\r\n      toReturn = new hQuery.CodedEntryList();\r\n\r\n  for( var i = 0, L = matches.length; i < L; i++ ){\r\n    var drug  = matches[ i ],\r\n        start = drug.indicateMedicationStart().getTime(),\r\n        pad   =( drug.indicateMedicationStop().getTime() - start )* 1.2,\r\n        end   = start + pad;\r\n\r\n    if( start <= now && now <= end )\r\n      toReturn.push( drug );\r\n  }\r\n  return toReturn;\r\n}\r\n\r\n\r\n/**\r\n * Used by filter_general() and filter_general()\r\n *   - inclusive range, boundary cases are counted\r\n */\r\nfunction filter_values( list, min, max ){\r\n  // Default value\r\n  max = max || 1000000000;\r\n\r\n  var toReturn = new hQuery.CodedEntryList();\r\n  for( var i = 0, L = list.length; i < L; i++ ){\r\n    // Try-catch for missing value field in lab results\r\n    try {\r\n      var entry  = list[ i ],\r\n          scalar = entry.values()[ 0 ].scalar();\r\n      if( min <= scalar && scalar <= max )\r\n        toReturn.push( entry );\r\n    }\r\n    catch( err ){\r\n      emit( \"Values key is missing! \" + err, 1 );\r\n    }\r\n  }\r\n  return toReturn;\r\n}\r\n\r\n\r\n/**\r\n * T/F: Does a filtered list contain matches (/is not empty)?\r\n */\r\nfunction isMatch( list ) {\r\n  return 0 < list.length;\r\n}\r\n\r\n\r\n/**\r\n * T/F: Does the patient fall in this age range?\r\n *   - inclusive range, boundary cases are counted\r\n */\r\nfunction isAge( ageMin, ageMax ) {\r\n  // Default values\r\n  ageMax = ageMax || 200;\r\n\r\n  ageNow = patient.age( new Date() );\r\n  return ( ageMin <= ageNow && ageNow <= ageMax );\r\n}\r\n", "reduce" : "function reduce(key, values) {\r\n  return Array.sum(values); \r\n}" }
{ "_type" : "Query", "title" : "PDC-028", "description" : "BP <= 130/80 in last 1y / diabetes", "generated" : false, "user_id" : { "$oid" : "551c1c4a062036a571d114c7" }, "query_structure" : { "find" : { "and" : [] }, "filter" : { "and" : [] }, "extract" : { "selections" : [], "groups" : [] } }, "filter" : "", "map" : "/**\r\n * Query Title: PDC-028\r\n * Query Type:  Ratio\r\n * Description: BP <= 130/80 in last 12m / diabetes\r\n */\r\nfunction map( patient ){\r\n  /**\r\n   * Denominator\r\n   *\r\n   * Base criteria:\r\n   *   - diagnosed with diabetes\r\n   */\r\n  function checkDenominator(){\r\n    // Coded entry lists\r\n    var conList       = patient.conditions(),\r\n\r\n    // Medical codes\r\n    // http://www.cms.gov/medicare-coverage-database/staticpages/icd-9-code-lookup.aspx?KeyWord=diabetes\r\n        conCodes      ={ \"ICD9\"      :[ \"^250\" ]},  // Diabetes, types 1 and 2\r\n\r\n    // Filters\r\n        conditions    = filter_general( conList, conCodes );\r\n\r\n    // Inclusion/exclusion\r\n    return isMatch( conditions );\r\n  }\r\n\r\n\r\n  /**\r\n   * Numerator\r\n   *\r\n   * Additional criteria:\r\n   *   - Blood Pressure recorded\r\n   *     - in last year\r\n   *     - Systolic <= 130 mm[hg]\r\n   *       AND\r\n   *     - Diastolic <= 80 mm[hg]\r\n   */\r\n  function checkNumerator(){\r\n    // Values\r\n    var vitMin_S = 0,\r\n        vitMax_S = 130,\r\n        vitMin_D = 0,\r\n        vitMax_D = 80,\r\n\r\n    // Dates\r\n        end      = new Date(),\r\n        vitStart = new Date( end.getFullYear() - 1, end.getMonth(), end.getDate() ),\r\n\r\n    // Lists\r\n        vitList  = patient.vitalSigns(),\r\n\r\n    // Medical codes - http://search.loinc.org/search.zul?query=intravascular+systolic+%22Arterial+system%22+-XXX\r\n        vitCodes_S ={ \"LOINC\"    :[ \"8480-6\" ]}, // Systolic blood pressure\r\n\r\n    // Medical codes - http://search.loinc.org/search.zul?query=intravascular+diastolic+%22Arterial+system%22+-XXX\r\n        vitCodes_D ={ \"LOINC\"    :[ \"8462-4\" ]}, // Diastolic blood pressure\r\n\r\n   // Filters\r\n        vitals_S   = filter_general( vitList, vitCodes_S, vitMin_S, vitMax_S, vitStart ),\r\n        vitals_D   = filter_general( vitList, vitCodes_D, vitMin_D, vitMax_D, vitStart );\r\n\r\n    // Inclusion/exclusion\r\n    return isMatch( vitals_S )&& isMatch( vitals_D );\r\n  }\r\n\r\n\r\n  /**\r\n   * Emit Numerator and Denominator:\r\n   *   - numerator must also be in denominator\r\n   *   - tagged with physician ID\r\n   */\r\n  var denominator = checkDenominator(),\r\n      numerator   = denominator && checkNumerator(),\r\n      physicianID = \"_\" + patient.json.primary_care_provider_id;\r\n\r\n  emit( \"denominator\" + physicianID, +denominator );\r\n  emit( \"numerator\"   + physicianID, +numerator   );\r\n}\r\n\r\n\r\n/*******************************************************************************\r\n * Helper Functions                                                            *\r\n *   These should be the same for all queries.  Copy a fresh set on every edit!*\r\n ******************************************************************************/\r\n\r\n\r\n/**\r\n * Filters a coded entry list:\r\n *   - parameters 1 & 2: list, codes\r\n *     - conditions(), immunizations(), medications(), results() or vitalSigns()\r\n *     - LOINC, pCLOCD, whoATC, SNOMED-CT, whoATC\r\n *   - parameters 3 - 6: dates or values, keep low/high pairs together\r\n *     - minimum and maximum values\r\n *     - start and end dates\r\n *     --> inclusive range, boundary cases are counted\r\n *     - null/undefined/unsubmitted values are ignored\r\n */\r\nfunction filter_general( list, codes, p3, p4, p5, p6 ){\r\n  // Default variables = undefined\r\n  var min, max, start, end, filteredList;\r\n\r\n  // Check parameters, which can be dates or number values (scalars)\r\n  if(( p3 instanceof Date )&&( p4 instanceof Date )){\r\n    start = p3;\r\n    end   = p4;\r\n    min   = p5;\r\n    max   = p6;\r\n  }\r\n  else if(( p3 instanceof Date )&&(! p4 )){\r\n    start = p3;\r\n  }\r\n  else if(( p3 instanceof Date )&&( typeof p4 === 'number' )){\r\n    start = p3;\r\n    min   = p4;\r\n    max   = p5;\r\n  }\r\n  else if(( typeof p3 === 'number' )&&( typeof p4 === 'number' )){\r\n    min   = p3;\r\n    max   = p4;\r\n    start = p5;\r\n    end   = p6;\r\n  }\r\n  else if(( typeof p3 === 'number' )&&(! p4 )){\r\n    min   = p3;\r\n  }\r\n  else if(( typeof p3 === 'number' )&&( p4 instanceof Date )){\r\n    min   = p3;\r\n    start = p4;\r\n    end   = p5;\r\n  }\r\n\r\n  // Use API's match functions to filter based on codes and dates\r\n  //   - Immunizations, medications and results use an exact code match\r\n  //   - Conditions use a regex match, so make sure to preface with '^'!\r\n  //   - undefined / null values are ignored\r\n  if(( list[0] )&&( list[0].json._type === 'Condition' ))\r\n    filteredList = list.regex_match( codes, start, end );\r\n  else\r\n    filteredList = list.match( codes, start, end );\r\n\r\n  // If there are scalar values (min/max), then filter with them\r\n  if( typeof min === 'number' ){\r\n    // Default value\r\n    max = max || 1000000000;\r\n    filteredList = filter_values( filteredList, min, max );\r\n  }\r\n\r\n  return filteredList;\r\n}\r\n\r\n\r\n/**\r\n * Filters a list of medications:\r\n *   - active status only (20% pad on time interval)\r\n */\r\nfunction filter_activeMeds( matches ){\r\n  var now      = new Date(),\r\n      toReturn = new hQuery.CodedEntryList();\r\n\r\n  for( var i = 0, L = matches.length; i < L; i++ ){\r\n    var drug  = matches[ i ],\r\n        start = drug.indicateMedicationStart().getTime(),\r\n        pad   =( drug.indicateMedicationStop().getTime() - start )* 1.2,\r\n        end   = start + pad;\r\n\r\n    if( start <= now && now <= end )\r\n      toReturn.push( drug );\r\n  }\r\n  return toReturn;\r\n}\r\n\r\n\r\n/**\r\n * Used by filter_general() and filter_general()\r\n *   - inclusive range, boundary cases are counted\r\n */\r\nfunction filter_values( list, min, max ){\r\n  // Default value\r\n  max = max || 1000000000;\r\n\r\n  var toReturn = new hQuery.CodedEntryList();\r\n  for( var i = 0, L = list.length; i < L; i++ ){\r\n    // Try-catch for missing value field in lab results\r\n    try {\r\n      var entry  = list[ i ],\r\n          scalar = entry.values()[ 0 ].scalar();\r\n      if( min <= scalar && scalar <= max )\r\n        toReturn.push( entry );\r\n    }\r\n    catch( err ){\r\n      emit( \"Values key is missing! \" + err, 1 );\r\n    }\r\n  }\r\n  return toReturn;\r\n}\r\n\r\n\r\n/**\r\n * T/F: Does a filtered list contain matches (/is not empty)?\r\n */\r\nfunction isMatch( list ) {\r\n  return 0 < list.length;\r\n}\r\n\r\n\r\n/**\r\n * T/F: Does the patient fall in this age range?\r\n *   - inclusive range, boundary cases are counted\r\n */\r\nfunction isAge( ageMin, ageMax ) {\r\n  // Default values\r\n  ageMax = ageMax || 200;\r\n\r\n  ageNow = patient.age( new Date() );\r\n  return ( ageMin <= ageNow && ageNow <= ageMax );\r\n}\r\n", "reduce" : "function reduce(key, values) {\r\n  return Array.sum(values); \r\n}" }
{ "_type" : "Query", "title" : "PDC-053", "description" : "5+ medications / age 65+", "generated" : false, "user_id" : { "$oid" : "551c1c4a062036a571d114c7" }, "query_structure" : { "find" : { "and" : [] }, "filter" : { "and" : [] }, "extract" : { "selections" : [], "groups" : [] } }, "filter" : "", "map" : "/**\r\n * Query Title: PDC-053\r\n * Query Type:  Ratio\r\n * Desctiption: Count: 5+ medications / age 65+\r\n */\r\nfunction map( patient ){\r\n  /**\r\n   * Denominator:\r\n   *   - 65+ years old\r\n   */\r\n  function checkDenominator(){\r\n    var ageMin = 65;\r\n\r\n    return isAge( ageMin );\r\n  }\r\n\r\n\r\n  /**\r\n   * Numerator:\r\n   *   - 5+ medications\r\n   *   - medications are active\r\n   */\r\n  function checkNumerator(){\r\n    var medMin    = 5,\r\n\r\n    // List of medications\r\n        medList   = patient.medications(),\r\n\r\n    // Filters\r\n        medActive = filter_activeMeds( medList );\r\n\r\n    return isMatch( medActive )&&( medMin <= medActive.length );\r\n  }\r\n\r\n\r\n  /**\r\n   * Emit Numerator and Denominator, tagged with physician ID\r\n   */\r\n  var denominator = checkDenominator(),\r\n      numerator   = denominator && checkNumerator(),\r\n      physicianID = \"_\" + patient.json.primary_care_provider_id;\r\n\r\n  emit( \"denominator\" + physicianID, +denominator );\r\n  emit( \"numerator\"   + physicianID, +numerator   );\r\n}\r\n\r\n\r\n/*******************************************************************************\r\n * Helper Functions                                                            *\r\n *   These should be the same for all queries.  Copy a fresh set on every edit!*\r\n ******************************************************************************/\r\n\r\n\r\n/**\r\n * Filters a coded entry list:\r\n *   - parameters 1 & 2: list, codes\r\n *     - conditions(), immunizations(), medications(), results() or vitalSigns()\r\n *     - LOINC, pCLOCD, whoATC, SNOMED-CT, whoATC\r\n *   - parameters 3 - 6: dates or values, keep low/high pairs together\r\n *     - minimum and maximum values\r\n *     - start and end dates\r\n *     --> inclusive range, boundary cases are counted\r\n *     - null/undefined/unsubmitted values are ignored\r\n */\r\nfunction filter_general( list, codes, p3, p4, p5, p6 ){\r\n  // Default variables = undefined\r\n  var min, max, start, end, filteredList;\r\n\r\n  // Check parameters, which can be dates or number values (scalars)\r\n  if(( p3 instanceof Date )&&( p4 instanceof Date )){\r\n    start = p3;\r\n    end   = p4;\r\n    min   = p5;\r\n    max   = p6;\r\n  }\r\n  else if(( p3 instanceof Date )&&(! p4 )){\r\n    start = p3;\r\n  }\r\n  else if(( p3 instanceof Date )&&( typeof p4 === 'number' )){\r\n    start = p3;\r\n    min   = p4;\r\n    max   = p5;\r\n  }\r\n  else if(( typeof p3 === 'number' )&&( typeof p4 === 'number' )){\r\n    min   = p3;\r\n    max   = p4;\r\n    start = p5;\r\n    end   = p6;\r\n  }\r\n  else if(( typeof p3 === 'number' )&&(! p4 )){\r\n    min   = p3;\r\n  }\r\n  else if(( typeof p3 === 'number' )&&( p4 instanceof Date )){\r\n    min   = p3;\r\n    start = p4;\r\n    end   = p5;\r\n  }\r\n\r\n  // Use API's match functions to filter based on codes and dates\r\n  //   - Immunizations, medications and results use an exact code match\r\n  //   - Conditions use a regex match, so make sure to preface with '^'!\r\n  //   - undefined / null values are ignored\r\n  if(( list[0] )&&( list[0].json._type === 'Condition' ))\r\n    filteredList = list.regex_match( codes, start, end );\r\n  else\r\n    filteredList = list.match( codes, start, end );\r\n\r\n  // If there are scalar values (min/max), then filter with them\r\n  if( typeof min === 'number' ){\r\n    // Default value\r\n    max = max || 1000000000;\r\n    filteredList = filter_values( filteredList, min, max );\r\n  }\r\n\r\n  return filteredList;\r\n}\r\n\r\n\r\n/**\r\n * Filters a list of medications:\r\n *   - active status only (20% pad on time interval)\r\n */\r\nfunction filter_activeMeds( matches ){\r\n  var now      = new Date(),\r\n      toReturn = new hQuery.CodedEntryList();\r\n\r\n  for( var i = 0, L = matches.length; i < L; i++ ){\r\n    var drug  = matches[ i ],\r\n        start = drug.indicateMedicationStart().getTime(),\r\n        pad   =( drug.indicateMedicationStop().getTime() - start )* 1.2,\r\n        end   = start + pad;\r\n\r\n    if( start <= now && now <= end )\r\n      toReturn.push( drug );\r\n  }\r\n  return toReturn;\r\n}\r\n\r\n\r\n/**\r\n * Used by filter_general() and filter_general()\r\n *   - inclusive range, boundary cases are counted\r\n */\r\nfunction filter_values( list, min, max ){\r\n  // Default value\r\n  max = max || 1000000000;\r\n\r\n  var toReturn = new hQuery.CodedEntryList();\r\n  for( var i = 0, L = list.length; i < L; i++ ){\r\n    // Try-catch for missing value field in lab results\r\n    try {\r\n      var entry  = list[ i ],\r\n          scalar = entry.values()[ 0 ].scalar();\r\n      if( min <= scalar && scalar <= max )\r\n        toReturn.push( entry );\r\n    }\r\n    catch( err ){\r\n      emit( \"Values key is missing! \" + err, 1 );\r\n    }\r\n  }\r\n  return toReturn;\r\n}\r\n\r\n\r\n/**\r\n * T/F: Does a filtered list contain matches (/is not empty)?\r\n */\r\nfunction isMatch( list ) {\r\n  return 0 < list.length;\r\n}\r\n\r\n\r\n/**\r\n * T/F: Does the patient fall in this age range?\r\n *   - inclusive range, boundary cases are counted\r\n */\r\nfunction isAge( ageMin, ageMax ) {\r\n  // Default values\r\n  ageMax = ageMax || 200;\r\n\r\n  ageNow = patient.age( new Date() );\r\n  return ( ageMin <= ageNow && ageNow <= ageMax );\r\n}\r\n", "reduce" : "function reduce(key, values) {\r\n  return Array.sum(values); \r\n}" }
{ "_type" : "Query", "title" : "PDC-054", "description" : "10+ medications / age 65+", "generated" : false, "user_id" : { "$oid" : "551c1c4a062036a571d114c7" }, "query_structure" : { "find" : { "and" : [] }, "filter" : { "and" : [] }, "extract" : { "selections" : [], "groups" : [] } }, "filter" : "", "map" : "/**\r\n * Query Title: PDC-054\r\n * Query Type:  Ratio\r\n * Desctiption: 10+ medications / age 65+\r\n */\r\nfunction map( patient ){\r\n  /**\r\n   * Denominator:\r\n   *   - 65+ years old\r\n   */\r\n  function checkDenominator(){\r\n    var ageMin = 65;\r\n\r\n    return isAge( ageMin );\r\n  }\r\n\r\n\r\n  /**\r\n   * Numerator:\r\n   *   - 10+ medications\r\n   *   - medications are active\r\n   */\r\n  function checkNumerator(){\r\n    var medMin    = 10,\r\n\r\n    // List of medications\r\n        medList   = patient.medications(),\r\n\r\n    // Filters\r\n        medActive = filter_activeMeds( medList );\r\n\r\n    return isMatch( medActive )&&( medMin <= medActive.length );\r\n  }\r\n\r\n\r\n  /**\r\n   * Emit Numerator and Denominator, tagged with physician ID\r\n   */\r\n  var denominator = checkDenominator(),\r\n      numerator   = denominator && checkNumerator(),\r\n      physicianID = \"_\" + patient.json.primary_care_provider_id;\r\n\r\n  emit( \"denominator\" + physicianID, +denominator );\r\n  emit( \"numerator\"   + physicianID, +numerator   );\r\n}\r\n\r\n\r\n/*******************************************************************************\r\n * Helper Functions                                                            *\r\n *   These should be the same for all queries.  Copy a fresh set on every edit!*\r\n ******************************************************************************/\r\n\r\n\r\n/**\r\n * Filters a coded entry list:\r\n *   - parameters 1 & 2: list, codes\r\n *     - conditions(), immunizations(), medications(), results() or vitalSigns()\r\n *     - LOINC, pCLOCD, whoATC, SNOMED-CT, whoATC\r\n *   - parameters 3 - 6: dates or values, keep low/high pairs together\r\n *     - minimum and maximum values\r\n *     - start and end dates\r\n *     --> inclusive range, boundary cases are counted\r\n *     - null/undefined/unsubmitted values are ignored\r\n */\r\nfunction filter_general( list, codes, p3, p4, p5, p6 ){\r\n  // Default variables = undefined\r\n  var min, max, start, end, filteredList;\r\n\r\n  // Check parameters, which can be dates or number values (scalars)\r\n  if(( p3 instanceof Date )&&( p4 instanceof Date )){\r\n    start = p3;\r\n    end   = p4;\r\n    min   = p5;\r\n    max   = p6;\r\n  }\r\n  else if(( p3 instanceof Date )&&(! p4 )){\r\n    start = p3;\r\n  }\r\n  else if(( p3 instanceof Date )&&( typeof p4 === 'number' )){\r\n    start = p3;\r\n    min   = p4;\r\n    max   = p5;\r\n  }\r\n  else if(( typeof p3 === 'number' )&&( typeof p4 === 'number' )){\r\n    min   = p3;\r\n    max   = p4;\r\n    start = p5;\r\n    end   = p6;\r\n  }\r\n  else if(( typeof p3 === 'number' )&&(! p4 )){\r\n    min   = p3;\r\n  }\r\n  else if(( typeof p3 === 'number' )&&( p4 instanceof Date )){\r\n    min   = p3;\r\n    start = p4;\r\n    end   = p5;\r\n  }\r\n\r\n  // Use API's match functions to filter based on codes and dates\r\n  //   - Immunizations, medications and results use an exact code match\r\n  //   - Conditions use a regex match, so make sure to preface with '^'!\r\n  //   - undefined / null values are ignored\r\n  if(( list[0] )&&( list[0].json._type === 'Condition' ))\r\n    filteredList = list.regex_match( codes, start, end );\r\n  else\r\n    filteredList = list.match( codes, start, end );\r\n\r\n  // If there are scalar values (min/max), then filter with them\r\n  if( typeof min === 'number' ){\r\n    // Default value\r\n    max = max || 1000000000;\r\n    filteredList = filter_values( filteredList, min, max );\r\n  }\r\n\r\n  return filteredList;\r\n}\r\n\r\n\r\n/**\r\n * Filters a list of medications:\r\n *   - active status only (20% pad on time interval)\r\n */\r\nfunction filter_activeMeds( matches ){\r\n  var now      = new Date(),\r\n      toReturn = new hQuery.CodedEntryList();\r\n\r\n  for( var i = 0, L = matches.length; i < L; i++ ){\r\n    var drug  = matches[ i ],\r\n        start = drug.indicateMedicationStart().getTime(),\r\n        pad   =( drug.indicateMedicationStop().getTime() - start )* 1.2,\r\n        end   = start + pad;\r\n\r\n    if( start <= now && now <= end )\r\n      toReturn.push( drug );\r\n  }\r\n  return toReturn;\r\n}\r\n\r\n\r\n/**\r\n * Used by filter_general() and filter_general()\r\n *   - inclusive range, boundary cases are counted\r\n */\r\nfunction filter_values( list, min, max ){\r\n  // Default value\r\n  max = max || 1000000000;\r\n\r\n  var toReturn = new hQuery.CodedEntryList();\r\n  for( var i = 0, L = list.length; i < L; i++ ){\r\n    // Try-catch for missing value field in lab results\r\n    try {\r\n      var entry  = list[ i ],\r\n          scalar = entry.values()[ 0 ].scalar();\r\n      if( min <= scalar && scalar <= max )\r\n        toReturn.push( entry );\r\n    }\r\n    catch( err ){\r\n      emit( \"Values key is missing! \" + err, 1 );\r\n    }\r\n  }\r\n  return toReturn;\r\n}\r\n\r\n\r\n/**\r\n * T/F: Does a filtered list contain matches (/is not empty)?\r\n */\r\nfunction isMatch( list ) {\r\n  return 0 < list.length;\r\n}\r\n\r\n\r\n/**\r\n * T/F: Does the patient fall in this age range?\r\n *   - inclusive range, boundary cases are counted\r\n */\r\nfunction isAge( ageMin, ageMax ) {\r\n  // Default values\r\n  ageMax = ageMax || 200;\r\n\r\n  ageNow = patient.age( new Date() );\r\n  return ( ageMin <= ageNow && ageNow <= ageMax );\r\n}\r\n", "reduce" : "function reduce(key, values) {\r\n  return Array.sum(values); \r\n}" }
{ "_type" : "Query", "title" : "PDC-056", "description" : "Digoxin > 125 mcg/day / renal, age 65+", "generated" : false, "user_id" : { "$oid" : "551c1c4a062036a571d114c7" }, "query_structure" : { "find" : { "and" : [] }, "filter" : { "and" : [] }, "extract" : { "selections" : [], "groups" : [] } }, "filter" : "", "map" : "/**\r\n * Query Title: PDC-056\r\n * Query Type:  Ratio\r\n * Description: Digoxin > 125 mcg/day / impaired renal, age 65+\r\n */\r\nfunction map( patient ){\r\n  /**\r\n   * Denominator:\r\n   *   - 65+ years old\r\n   *   - impaired renal function\r\n   *   --> EGFR < 50 ml/min OR creatinine > 150 μmol/l\r\n   */\r\n  function checkDenominator(){\r\n    var ageMin     = 65,\r\n        valMax_E   = 50.001,                 // (+0.001, using INCLUSIVE ranges)\r\n        valMin_C   = 150.001,                // (+0.001, using INCLUSIVE ranges)\r\n\r\n    // List of lab test results, codes for eGFR and creatine\r\n        resList    = patient.results(),\r\n        resCodes_E ={ \"pCLOCD\" :[ \"33914-3\" ]},\r\n        resCodes_C ={ \"pCLOCD\" :[ \"45066-8\", \"14682-9\", \"2160-0\", \"33914-3\",\r\n                                  \"50044-7\", \"48642-3\", \"48643-1\" ]},\r\n\r\n    // Filters\r\n        results_E = filter_general( resList, resCodes_E, 0, valMax_E ),\r\n        results_C = filter_general( resList, resCodes_C, valMin_C );\r\n\r\n    return isAge( ageMin )&&( isMatch( results_E )|| isMatch( results_C ));\r\n  }\r\n\r\n\r\n  /**\r\n   * Numerator:\r\n   *   - digoxin (medication) > 125 mcg/day (using 0.125 mg/day)\r\n   *   - medication is active\r\n   */\r\n  function checkNumerator(){\r\n    // List of medications, codes for digoxin\r\n    var medMin   = 0.1251,                  // (+0.0001, using INCLUSIVE ranges)\r\n\r\n    // List of medications, codes for digoxin (class of medicines)\r\n        medList  = patient.medications(),\r\n        medCodes ={ \"whoATC\":[ \"C01AA*\" ],\r\n                    \"HC-DIN\":[ \"02281236\", \"02281228\", \"02281201\", \"02245428\",\r\n                               \"02245427\", \"02245426\", \"02048264\", \"02048272\",\r\n                               \"0021415\",  \"00698296\", \"00647470\" ]},\r\n\r\n    // Filters\r\n        medications = filter_general( medList, medCodes, medMin );\r\n        medications = filter_activeMeds( medications );\r\n\r\n    return isMatch( medications );\r\n  }\r\n\r\n\r\n  /**\r\n   * Emit Numerator and Denominator:\r\n   *   - numerator must also be in denominator\r\n   *   - tagged with physician ID\r\n   */\r\n  var denominator = checkDenominator(),\r\n      numerator   = denominator && checkNumerator(),\r\n      physicianID = \"_\" + patient.json.primary_care_provider_id;\r\n\r\n  emit( \"denominator\" + physicianID, +denominator );\r\n  emit( \"numerator\"   + physicianID, +numerator   );\r\n}\r\n\r\n\r\n/*******************************************************************************\r\n * Helper Functions                                                            *\r\n *   These should be the same for all queries.  Copy a fresh set on every edit!*\r\n ******************************************************************************/\r\n\r\n\r\n/**\r\n * Filters a coded entry list:\r\n *   - parameters 1 & 2: list, codes\r\n *     - conditions(), immunizations(), medications(), results() or vitalSigns()\r\n *     - LOINC, pCLOCD, whoATC, SNOMED-CT, whoATC\r\n *   - parameters 3 - 6: dates or values, keep low/high pairs together\r\n *     - minimum and maximum values\r\n *     - start and end dates\r\n *     --> inclusive range, boundary cases are counted\r\n *     - null/undefined/unsubmitted values are ignored\r\n */\r\nfunction filter_general( list, codes, p3, p4, p5, p6 ){\r\n  // Default variables = undefined\r\n  var min, max, start, end, filteredList;\r\n\r\n  // Check parameters, which can be dates or number values (scalars)\r\n  if(( p3 instanceof Date )&&( p4 instanceof Date )){\r\n    start = p3;\r\n    end   = p4;\r\n    min   = p5;\r\n    max   = p6;\r\n  }\r\n  else if(( p3 instanceof Date )&&(! p4 )){\r\n    start = p3;\r\n  }\r\n  else if(( p3 instanceof Date )&&( typeof p4 === 'number' )){\r\n    start = p3;\r\n    min   = p4;\r\n    max   = p5;\r\n  }\r\n  else if(( typeof p3 === 'number' )&&( typeof p4 === 'number' )){\r\n    min   = p3;\r\n    max   = p4;\r\n    start = p5;\r\n    end   = p6;\r\n  }\r\n  else if(( typeof p3 === 'number' )&&(! p4 )){\r\n    min   = p3;\r\n  }\r\n  else if(( typeof p3 === 'number' )&&( p4 instanceof Date )){\r\n    min   = p3;\r\n    start = p4;\r\n    end   = p5;\r\n  }\r\n\r\n  // Use API's match functions to filter based on codes and dates\r\n  //   - Immunizations, medications and results use an exact code match\r\n  //   - Conditions use a regex match, so make sure to preface with '^'!\r\n  //   - undefined / null values are ignored\r\n  if(( list[0] )&&( list[0].json._type === 'Condition' ))\r\n    filteredList = list.regex_match( codes, start, end );\r\n  else\r\n    filteredList = list.match( codes, start, end );\r\n\r\n  // If there are scalar values (min/max), then filter with them\r\n  if( typeof min === 'number' ){\r\n    // Default value\r\n    max = max || 1000000000;\r\n    filteredList = filter_values( filteredList, min, max );\r\n  }\r\n\r\n  return filteredList;\r\n}\r\n\r\n\r\n/**\r\n * Filters a list of medications:\r\n *   - active status only (20% pad on time interval)\r\n */\r\nfunction filter_activeMeds( matches ){\r\n  var now      = new Date(),\r\n      toReturn = new hQuery.CodedEntryList();\r\n\r\n  for( var i = 0, L = matches.length; i < L; i++ ){\r\n    var drug  = matches[ i ],\r\n        start = drug.indicateMedicationStart().getTime(),\r\n        pad   =( drug.indicateMedicationStop().getTime() - start )* 1.2,\r\n        end   = start + pad;\r\n\r\n    if( start <= now && now <= end )\r\n      toReturn.push( drug );\r\n  }\r\n  return toReturn;\r\n}\r\n\r\n\r\n/**\r\n * Used by filter_general() and filter_general()\r\n *   - inclusive range, boundary cases are counted\r\n */\r\nfunction filter_values( list, min, max ){\r\n  // Default value\r\n  max = max || 1000000000;\r\n\r\n  var toReturn = new hQuery.CodedEntryList();\r\n  for( var i = 0, L = list.length; i < L; i++ ){\r\n    // Try-catch for missing value field in lab results\r\n    try {\r\n      var entry  = list[ i ],\r\n          scalar = entry.values()[ 0 ].scalar();\r\n      if( min <= scalar && scalar <= max )\r\n        toReturn.push( entry );\r\n    }\r\n    catch( err ){\r\n      emit( \"Values key is missing! \" + err, 1 );\r\n    }\r\n  }\r\n  return toReturn;\r\n}\r\n\r\n\r\n/**\r\n * T/F: Does a filtered list contain matches (/is not empty)?\r\n */\r\nfunction isMatch( list ) {\r\n  return 0 < list.length;\r\n}\r\n\r\n\r\n/**\r\n * T/F: Does the patient fall in this age range?\r\n *   - inclusive range, boundary cases are counted\r\n */\r\nfunction isAge( ageMin, ageMax ) {\r\n  // Default values\r\n  ageMax = ageMax || 200;\r\n\r\n  ageNow = patient.age( new Date() );\r\n  return ( ageMin <= ageNow && ageNow <= ageMax );\r\n}\r\n", "reduce" : "function reduce(key, values) {\r\n  return Array.sum(values); \r\n}" }
{ "_type" : "Query", "title" : "PDC-057", "description" : "Statins for primary prevention / all on statins", "generated" : false, "user_id" : { "$oid" : "551c1c4a062036a571d114c7" }, "query_structure" : { "find" : { "and" : [] }, "filter" : { "and" : [] }, "extract" : { "selections" : [], "groups" : [] } }, "filter" : "", "map" : "/**\r\n * Query Title: PDC-057\r\n * Query Type:  Ratio\r\n * Desctiption: Statins for primary prevention / all on statins\r\n */\r\nfunction map( patient ){\r\n  /**\r\n   * Denominator:\r\n   *   - have received a statin medication (for cholesterol)\r\n   */\r\n  // Declare in map() scope, used by checDenominator() and checkNumerator()\r\n  var mapScope_medications;\r\n\r\n  function checkDenominator(){\r\n    // List of medications, codes for statins\r\n    var medList  = patient.medications(),\r\n        medCodes ={ \"whoATC\" :[ \"C10AA\", \"C10BX\" ]};\r\n\r\n    // Filters (variable declared in map())\r\n    mapScope_medications = filter_general( medList, medCodes );\r\n\r\n    return isMatch( mapScope_medications );\r\n  }\r\n\r\n\r\n  /**\r\n   * Numerator:\r\n   *   - medication is active\r\n   *   - have not had a stroke\r\n   *   - have not had a myocardial infarction (MI, heart attack)\r\n   *   - have not had an acute myocardial infarction (AMI, heart attack)\r\n   */\r\n  function checkNumerator(){\r\n    // Denominator's list of medications, list of conditions, condition codes\r\n    var medList  = mapScope_medications,\r\n        conList  = patient.conditions(),\r\n        conCodes ={ \"ICD9\":[ \"410..*\", \"411..*\", \"412..*\", \"429.7\",\r\n                             \"410\",    \"411\",    \"412\",    \"V17.1\",\r\n                             \"438\",    \"433.1\",  \"434.1\",  \"438..*\" ]},\r\n\r\n    // Filters\r\n        medications = filter_activeMeds( medList ),\r\n        conditions  = filter_general( conList, conCodes );\r\n\r\n    return isMatch( medications )&&(! isMatch( conditions ));\r\n  }\r\n\r\n\r\n  /**\r\n   * Emit Numerator and Denominator:\r\n   *   - numerator must also be in denominator\r\n   *   - tagged with physician ID\r\n   */\r\n  var denominator = checkDenominator(),\r\n      numerator   = denominator && checkNumerator(),\r\n      physicianID = \"_\" + patient.json.primary_care_provider_id;\r\n\r\n  emit( \"denominator\" + physicianID, +denominator );\r\n  emit( \"numerator\"   + physicianID, +numerator   );\r\n}\r\n\r\n\r\n/*******************************************************************************\r\n * Helper Functions                                                            *\r\n *   These should be the same for all queries.  Copy a fresh set on every edit!*\r\n ******************************************************************************/\r\n\r\n\r\n/**\r\n * Filters a coded entry list:\r\n *   - parameters 1 & 2: list, codes\r\n *     - conditions(), immunizations(), medications(), results() or vitalSigns()\r\n *     - LOINC, pCLOCD, whoATC, SNOMED-CT, whoATC\r\n *   - parameters 3 - 6: dates or values, keep low/high pairs together\r\n *     - minimum and maximum values\r\n *     - start and end dates\r\n *     --> inclusive range, boundary cases are counted\r\n *     - null/undefined/unsubmitted values are ignored\r\n */\r\nfunction filter_general( list, codes, p3, p4, p5, p6 ){\r\n  // Default variables = undefined\r\n  var min, max, start, end, filteredList;\r\n\r\n  // Check parameters, which can be dates or number values (scalars)\r\n  if(( p3 instanceof Date )&&( p4 instanceof Date )){\r\n    start = p3;\r\n    end   = p4;\r\n    min   = p5;\r\n    max   = p6;\r\n  }\r\n  else if(( p3 instanceof Date )&&(! p4 )){\r\n    start = p3;\r\n  }\r\n  else if(( p3 instanceof Date )&&( typeof p4 === 'number' )){\r\n    start = p3;\r\n    min   = p4;\r\n    max   = p5;\r\n  }\r\n  else if(( typeof p3 === 'number' )&&( typeof p4 === 'number' )){\r\n    min   = p3;\r\n    max   = p4;\r\n    start = p5;\r\n    end   = p6;\r\n  }\r\n  else if(( typeof p3 === 'number' )&&(! p4 )){\r\n    min   = p3;\r\n  }\r\n  else if(( typeof p3 === 'number' )&&( p4 instanceof Date )){\r\n    min   = p3;\r\n    start = p4;\r\n    end   = p5;\r\n  }\r\n\r\n  // Use API's match functions to filter based on codes and dates\r\n  //   - Immunizations, medications and results use an exact code match\r\n  //   - Conditions use a regex match, so make sure to preface with '^'!\r\n  //   - undefined / null values are ignored\r\n  if(( list[0] )&&( list[0].json._type === 'Condition' ))\r\n    filteredList = list.regex_match( codes, start, end );\r\n  else\r\n    filteredList = list.match( codes, start, end );\r\n\r\n  // If there are scalar values (min/max), then filter with them\r\n  if( typeof min === 'number' ){\r\n    // Default value\r\n    max = max || 1000000000;\r\n    filteredList = filter_values( filteredList, min, max );\r\n  }\r\n\r\n  return filteredList;\r\n}\r\n\r\n\r\n/**\r\n * Filters a list of medications:\r\n *   - active status only (20% pad on time interval)\r\n */\r\nfunction filter_activeMeds( matches ){\r\n  var now      = new Date(),\r\n      toReturn = new hQuery.CodedEntryList();\r\n\r\n  for( var i = 0, L = matches.length; i < L; i++ ){\r\n    var drug  = matches[ i ],\r\n        start = drug.indicateMedicationStart().getTime(),\r\n        pad   =( drug.indicateMedicationStop().getTime() - start )* 1.2,\r\n        end   = start + pad;\r\n\r\n    if( start <= now && now <= end )\r\n      toReturn.push( drug );\r\n  }\r\n  return toReturn;\r\n}\r\n\r\n\r\n/**\r\n * Used by filter_general() and filter_general()\r\n *   - inclusive range, boundary cases are counted\r\n */\r\nfunction filter_values( list, min, max ){\r\n  // Default value\r\n  max = max || 1000000000;\r\n\r\n  var toReturn = new hQuery.CodedEntryList();\r\n  for( var i = 0, L = list.length; i < L; i++ ){\r\n    // Try-catch for missing value field in lab results\r\n    try {\r\n      var entry  = list[ i ],\r\n          scalar = entry.values()[ 0 ].scalar();\r\n      if( min <= scalar && scalar <= max )\r\n        toReturn.push( entry );\r\n    }\r\n    catch( err ){\r\n      emit( \"Values key is missing! \" + err, 1 );\r\n    }\r\n  }\r\n  return toReturn;\r\n}\r\n\r\n\r\n/**\r\n * T/F: Does a filtered list contain matches (/is not empty)?\r\n */\r\nfunction isMatch( list ) {\r\n  return 0 < list.length;\r\n}\r\n\r\n\r\n/**\r\n * T/F: Does the patient fall in this age range?\r\n *   - inclusive range, boundary cases are counted\r\n */\r\nfunction isAge( ageMin, ageMax ) {\r\n  // Default values\r\n  ageMax = ageMax || 200;\r\n\r\n  ageNow = patient.age( new Date() );\r\n  return ( ageMin <= ageNow && ageNow <= ageMax );\r\n}\r\n", "reduce" : "function reduce(key, values) {\r\n  return Array.sum(values); \r\n}" }
{ "_type" : "Query", "title" : "PDC-058", "description" : "Statins for secondary prevention / all on statins", "generated" : false, "user_id" : { "$oid" : "551c1c4a062036a571d114c7" }, "query_structure" : { "find" : { "and" : [] }, "filter" : { "and" : [] }, "extract" : { "selections" : [], "groups" : [] } }, "filter" : "", "map" : "/**\r\n * Query Title: PDC-058\r\n * Query Type:  Ratio\r\n * Desctiption: Statins for secondary prevention / all on statins\r\n */\r\nfunction map( patient ){\r\n  /**\r\n   * Denominator:\r\n   *   - have received a statin medication (for cholesterol)\r\n   */\r\n  function checkDenominator(){\r\n    // List of medications, codes for statins\r\n    var medList  = patient.medications(),\r\n        medCodes ={ \"whoATC\" :[ \"C10AA\", \"C10BX\" ]},\r\n\r\n    // Filters\r\n        medications = filter_general( medList, medCodes );\r\n\r\n    return isMatch( medications );\r\n  }\r\n\r\n\r\n  /**\r\n   * Numerator:\r\n   *   - medication is active\r\n   *   - have had a stroke\r\n   *   - OR have had a myocardial infarction (MI, heart attack)\r\n   *   - OR have had an acute myocardial infarction (AMI, heart attack)\r\n   */\r\n  function checkNumerator(){\r\n    // Filtered list of medications, list of conditions, codes for conditions\r\n    var medList  = d_final,\r\n        conList  = patient.conditions(),\r\n        conCodes ={ \"ICD9\":[ \"410..*\", \"411..*\", \"412..*\", \"429.7\",\r\n                             \"410\",    \"411\",    \"412\",    \"V17.1\",\r\n                             \"438\",    \"433.1\",  \"434.1\",  \"438..*\" ]},\r\n\r\n    // Filters\r\n        medications = filter_activeMeds( medList ),\r\n        conditions  = filter_general( conList, conCodes );\r\n\r\n    return isMatch( medications )&& isMatch( conditions );\r\n  }\r\n\r\n\r\n  /**\r\n   * Emit Numerator and Denominator:\r\n   *   - numerator must also be in denominator\r\n   *   - tagged with physician ID\r\n   */\r\n  var denominator = checkDenominator(),\r\n      numerator   = denominator && checkNumerator(),\r\n      physicianID = \"_\" + patient.json.primary_care_provider_id;\r\n\r\n  emit( \"denominator\" + physicianID, +denominator );\r\n  emit( \"numerator\"   + physicianID, +numerator   );\r\n}\r\n\r\n\r\n/*******************************************************************************\r\n * Helper Functions                                                            *\r\n *   These should be the same for all queries.  Copy a fresh set on every edit!*\r\n ******************************************************************************/\r\n\r\n\r\n/**\r\n * Filters a coded entry list:\r\n *   - parameters 1 & 2: list, codes\r\n *     - conditions(), immunizations(), medications(), results() or vitalSigns()\r\n *     - LOINC, pCLOCD, whoATC, SNOMED-CT, whoATC\r\n *   - parameters 3 - 6: dates or values, keep low/high pairs together\r\n *     - minimum and maximum values\r\n *     - start and end dates\r\n *     --> inclusive range, boundary cases are counted\r\n *     - null/undefined/unsubmitted values are ignored\r\n */\r\nfunction filter_general( list, codes, p3, p4, p5, p6 ){\r\n  // Default variables = undefined\r\n  var min, max, start, end, filteredList;\r\n\r\n  // Check parameters, which can be dates or number values (scalars)\r\n  if(( p3 instanceof Date )&&( p4 instanceof Date )){\r\n    start = p3;\r\n    end   = p4;\r\n    min   = p5;\r\n    max   = p6;\r\n  }\r\n  else if(( p3 instanceof Date )&&(! p4 )){\r\n    start = p3;\r\n  }\r\n  else if(( p3 instanceof Date )&&( typeof p4 === 'number' )){\r\n    start = p3;\r\n    min   = p4;\r\n    max   = p5;\r\n  }\r\n  else if(( typeof p3 === 'number' )&&( typeof p4 === 'number' )){\r\n    min   = p3;\r\n    max   = p4;\r\n    start = p5;\r\n    end   = p6;\r\n  }\r\n  else if(( typeof p3 === 'number' )&&(! p4 )){\r\n    min   = p3;\r\n  }\r\n  else if(( typeof p3 === 'number' )&&( p4 instanceof Date )){\r\n    min   = p3;\r\n    start = p4;\r\n    end   = p5;\r\n  }\r\n\r\n  // Use API's match functions to filter based on codes and dates\r\n  //   - Immunizations, medications and results use an exact code match\r\n  //   - Conditions use a regex match, so make sure to preface with '^'!\r\n  //   - undefined / null values are ignored\r\n  if(( list[0] )&&( list[0].json._type === 'Condition' ))\r\n    filteredList = list.regex_match( codes, start, end );\r\n  else\r\n    filteredList = list.match( codes, start, end );\r\n\r\n  // If there are scalar values (min/max), then filter with them\r\n  if( typeof min === 'number' ){\r\n    // Default value\r\n    max = max || 1000000000;\r\n    filteredList = filter_values( filteredList, min, max );\r\n  }\r\n\r\n  return filteredList;\r\n}\r\n\r\n\r\n/**\r\n * Filters a list of medications:\r\n *   - active status only (20% pad on time interval)\r\n */\r\nfunction filter_activeMeds( matches ){\r\n  var now      = new Date(),\r\n      toReturn = new hQuery.CodedEntryList();\r\n\r\n  for( var i = 0, L = matches.length; i < L; i++ ){\r\n    var drug  = matches[ i ],\r\n        start = drug.indicateMedicationStart().getTime(),\r\n        pad   =( drug.indicateMedicationStop().getTime() - start )* 1.2,\r\n        end   = start + pad;\r\n\r\n    if( start <= now && now <= end )\r\n      toReturn.push( drug );\r\n  }\r\n  return toReturn;\r\n}\r\n\r\n\r\n/**\r\n * Used by filter_general() and filter_general()\r\n *   - inclusive range, boundary cases are counted\r\n */\r\nfunction filter_values( list, min, max ){\r\n  // Default value\r\n  max = max || 1000000000;\r\n\r\n  var toReturn = new hQuery.CodedEntryList();\r\n  for( var i = 0, L = list.length; i < L; i++ ){\r\n    // Try-catch for missing value field in lab results\r\n    try {\r\n      var entry  = list[ i ],\r\n          scalar = entry.values()[ 0 ].scalar();\r\n      if( min <= scalar && scalar <= max )\r\n        toReturn.push( entry );\r\n    }\r\n    catch( err ){\r\n      emit( \"Values key is missing! \" + err, 1 );\r\n    }\r\n  }\r\n  return toReturn;\r\n}\r\n\r\n\r\n/**\r\n * T/F: Does a filtered list contain matches (/is not empty)?\r\n */\r\nfunction isMatch( list ) {\r\n  return 0 < list.length;\r\n}\r\n\r\n\r\n/**\r\n * T/F: Does the patient fall in this age range?\r\n *   - inclusive range, boundary cases are counted\r\n */\r\nfunction isAge( ageMin, ageMax ) {\r\n  // Default values\r\n  ageMax = ageMax || 200;\r\n\r\n  ageNow = patient.age( new Date() );\r\n  return ( ageMin <= ageNow && ageNow <= ageMax );\r\n}\r\n", "reduce" : "function reduce(key, values) {\r\n  return Array.sum(values); \r\n}" }
{ "_type" : "Query", "title" : "PDC-027", "description" : "LDL >= 2.5 mmol/L in last 1y / diabetes", "generated" : false, "user_id" : { "$oid" : "551c1c4a062036a571d114c7" }, "query_structure" : { "find" : { "and" : [] }, "filter" : { "and" : [] }, "extract" : { "selections" : [], "groups" : [] } }, "filter" : "", "map" : "/**\r\n * Query Title: PDC-027\r\n * Query Type:  Ratio\r\n * Description: LDL >= 2.5 mmol/L in last 1y / diabetes\r\n */\r\nfunction map( patient ){\r\n  /**\r\n   * Denominator\r\n   *\r\n   * Base criteria:\r\n   *   - diagnosed with diabetes\r\n   */\r\n  function checkDenominator(){\r\n    // Coded entry lists\r\n    var conList       = patient.conditions(),\r\n\r\n    // Medical codes - http://www.cms.gov/medicare-coverage-database/staticpages/icd-9-code-lookup.aspx?KeyWord=diabetes\r\n        conCodes      ={ \"ICD9\"      :[ \"^250\" ]},  // Diabetes, types 1 and 2\r\n\r\n    // Filters\r\n        conditions    = filter_general( conList, conCodes );\r\n\r\n    // Inclusion/exclusion\r\n    return isMatch( conditions );\r\n  }\r\n\r\n\r\n  /**\r\n   * Numerator\r\n   *\r\n   * Additional criteria:\r\n   *   - LDL >= 2.5 mmol/L\r\n   *   --> in last six months\r\n   */\r\n  function checkNumerator(){\r\n    // Values\r\n    //   - ages and min/max values\r\n    var resMin   = 2.5,\r\n\r\n    // Dates\r\n    //   - end:   () for current date, otherwise ( YYYY, MM, DD )\r\n    //   - start: subtract from end as Y, M, D\r\n        end      = new Date(),\r\n        resStart = new Date( end.getFullYear() - 1, end.getMonth(), end.getDate() ),\r\n\r\n    // Lists\r\n        resList  = patient.results(),\r\n\r\n    // Medical codes\r\n    // http://search.loinc.org/search.zul?query=%22Cholesterol.in+LDL%22+-HDL\r\n        resCodes ={ \"pCLOCD\"    :[ \"39469-2\" ]}, // Cholesterol in LDL [Moles/​volume] in Serum or Plasma by calculation\r\n\r\n    // Filters\r\n        results       = filter_general( resList, resCodes, resMin, resStart );\r\n\r\n    // Inclusion/exclusion\r\n    return isMatch( results );\r\n  }\r\n\r\n\r\n  /**\r\n   * Emit Numerator and Denominator:\r\n   *   - numerator must also be in denominator\r\n   *   - tagged with physician ID\r\n   */\r\n  var denominator = checkDenominator(),\r\n      numerator   = denominator && checkNumerator(),\r\n      physicianID = \"_\" + patient.json.primary_care_provider_id;\r\n\r\n  emit( \"denominator\" + physicianID, +denominator );\r\n  emit( \"numerator\"   + physicianID, +numerator   );\r\n}\r\n\r\n\r\n/*******************************************************************************\r\n * Helper Functions                                                            *\r\n *   These should be the same for all queries.  Copy a fresh set on every edit!*\r\n ******************************************************************************/\r\n\r\n\r\n/**\r\n * Filters a coded entry list:\r\n *   - parameters 1 & 2: list, codes\r\n *     - conditions(), immunizations(), medications(), results() or vitalSigns()\r\n *     - LOINC, pCLOCD, whoATC, SNOMED-CT, whoATC\r\n *   - parameters 3 - 6: dates or values, keep low/high pairs together\r\n *     - minimum and maximum values\r\n *     - start and end dates\r\n *     --> inclusive range, boundary cases are counted\r\n *     - null/undefined/unsubmitted values are ignored\r\n */\r\nfunction filter_general( list, codes, p3, p4, p5, p6 ){\r\n  // Default variables = undefined\r\n  var min, max, start, end, filteredList;\r\n\r\n  // Check parameters, which can be dates or number values (scalars)\r\n  if(( p3 instanceof Date )&&( p4 instanceof Date )){\r\n    start = p3;\r\n    end   = p4;\r\n    min   = p5;\r\n    max   = p6;\r\n  }\r\n  else if(( p3 instanceof Date )&&(! p4 )){\r\n    start = p3;\r\n  }\r\n  else if(( p3 instanceof Date )&&( typeof p4 === 'number' )){\r\n    start = p3;\r\n    min   = p4;\r\n    max   = p5;\r\n  }\r\n  else if(( typeof p3 === 'number' )&&( typeof p4 === 'number' )){\r\n    min   = p3;\r\n    max   = p4;\r\n    start = p5;\r\n    end   = p6;\r\n  }\r\n  else if(( typeof p3 === 'number' )&&(! p4 )){\r\n    min   = p3;\r\n  }\r\n  else if(( typeof p3 === 'number' )&&( p4 instanceof Date )){\r\n    min   = p3;\r\n    start = p4;\r\n    end   = p5;\r\n  }\r\n\r\n  // Use API's match functions to filter based on codes and dates\r\n  //   - Immunizations, medications and results use an exact code match\r\n  //   - Conditions use a regex match, so make sure to preface with '^'!\r\n  //   - undefined / null values are ignored\r\n  if(( list[0] )&&( list[0].json._type === 'Condition' ))\r\n    filteredList = list.regex_match( codes, start, end );\r\n  else\r\n    filteredList = list.match( codes, start, end );\r\n\r\n  // If there are scalar values (min/max), then filter with them\r\n  if( typeof min === 'number' ){\r\n    // Default value\r\n    max = max || 1000000000;\r\n    filteredList = filter_values( filteredList, min, max );\r\n  }\r\n\r\n  return filteredList;\r\n}\r\n\r\n\r\n/**\r\n * Filters a list of medications:\r\n *   - active status only (20% pad on time interval)\r\n */\r\nfunction filter_activeMeds( matches ){\r\n  var now      = new Date(),\r\n      toReturn = new hQuery.CodedEntryList();\r\n\r\n  for( var i = 0, L = matches.length; i < L; i++ ){\r\n    var drug  = matches[ i ],\r\n        start = drug.indicateMedicationStart().getTime(),\r\n        pad   =( drug.indicateMedicationStop().getTime() - start )* 1.2,\r\n        end   = start + pad;\r\n\r\n    if( start <= now && now <= end )\r\n      toReturn.push( drug );\r\n  }\r\n  return toReturn;\r\n}\r\n\r\n\r\n/**\r\n * Used by filter_general() and filter_general()\r\n *   - inclusive range, boundary cases are counted\r\n */\r\nfunction filter_values( list, min, max ){\r\n  // Default value\r\n  max = max || 1000000000;\r\n\r\n  var toReturn = new hQuery.CodedEntryList();\r\n  for( var i = 0, L = list.length; i < L; i++ ){\r\n    // Try-catch for missing value field in lab results\r\n    try {\r\n      var entry  = list[ i ],\r\n          scalar = entry.values()[ 0 ].scalar();\r\n      if( min <= scalar && scalar <= max )\r\n        toReturn.push( entry );\r\n    }\r\n    catch( err ){\r\n      emit( \"Values key is missing! \" + err, 1 );\r\n    }\r\n  }\r\n  return toReturn;\r\n}\r\n\r\n\r\n/**\r\n * T/F: Does a filtered list contain matches (/is not empty)?\r\n */\r\nfunction isMatch( list ) {\r\n  return 0 < list.length;\r\n}\r\n\r\n\r\n/**\r\n * T/F: Does the patient fall in this age range?\r\n *   - inclusive range, boundary cases are counted\r\n */\r\nfunction isAge( ageMin, ageMax ) {\r\n  // Default values\r\n  ageMax = ageMax || 200;\r\n\r\n  ageNow = patient.age( new Date() );\r\n  return ( ageMin <= ageNow && ageNow <= ageMax );\r\n}\r\n", "reduce" : "function reduce(key, values) {\r\n  return Array.sum(values); \r\n}" }
